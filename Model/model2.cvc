x_0_0 : BITVECTOR(6);
y_0_0 : BITVECTOR(6);
x_1_0 : BITVECTOR(6);
y_1_0 : BITVECTOR(6);
x_2_0 : BITVECTOR(6);
y_2_0 : BITVECTOR(6);
x_3_0 : BITVECTOR(6);
y_3_0 : BITVECTOR(6);
end : BITVECTOR(1);
ASSERT(end = 0bin1);
ASSERT(x_0_0[5:5] | x_0_0[4:4] | x_0_0[3:3] | x_0_0[1:1] = 0bin0);
ASSERT(x_1_0[5:5] | x_1_0[4:4] | x_1_0[3:3] | x_1_0[1:1] = 0bin0);
ASSERT(x_2_0[5:5] | x_2_0[4:4] | x_2_0[3:3] | x_2_0[1:1] = 0bin0);
ASSERT(x_3_0[5:5] | x_3_0[4:4] | x_3_0[3:3] | x_3_0[1:1] = 0bin0);
ASSERT((x_0_0 = 0bin000001) OR (x_1_0 = 0bin000001) OR (x_2_0 = 0bin000001) OR (x_3_0 = 0bin000001));
ASSERT((x_0_0 = 0bin000100) OR(x_1_0 = 0bin000100) OR(x_2_0 = 0bin000100) OR(x_3_0 = 0bin000100));
tag_0_0 : BITVECTOR(1);
ASSERT(x_0_0 = 0bin000100 OR x_0_0 = 0bin000101 => tag_0_0 = 0bin1);
tag_1_0 : BITVECTOR(1);
ASSERT(x_1_0 = 0bin000100 OR x_1_0 = 0bin000101 => tag_1_0 = 0bin1);
tag_2_0 : BITVECTOR(1);
ASSERT(x_2_0 = 0bin000100 OR x_2_0 = 0bin000101 => tag_2_0 = 0bin1);
tag_3_0 : BITVECTOR(1);
ASSERT(x_3_0 = 0bin000100 OR x_3_0 = 0bin000101 => tag_3_0 = 0bin1);
ASSERT(BVLE(BVPLUS(10,0bin000000000@tag_0_0,0bin000000000@tag_1_0,0bin000000000@tag_2_0,0bin000000000@tag_3_0), 0bin0000000001 ));
x_0_1 : BITVECTOR(6);
y_0_1 : BITVECTOR(6);
x_1_1 : BITVECTOR(6);
y_1_1 : BITVECTOR(6);
x_2_1 : BITVECTOR(6);
y_2_1 : BITVECTOR(6);
x_3_1 : BITVECTOR(6);
y_3_1 : BITVECTOR(6);
ROUNDFUNC_IN_0_0 : BITVECTOR(6);
ROUNDFUNC_OUT_0_0 : BITVECTOR(6);
period_0_0 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_0 = 0bin000000 THEN ROUNDFUNC_OUT_0_0 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_0 = 0bin010000 THEN ROUNDFUNC_OUT_0_0 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_0 = 0bin000100 OR ROUNDFUNC_IN_0_0 = 0bin001000 OR ROUNDFUNC_IN_0_0 = 0bin001100 THEN ROUNDFUNC_OUT_0_0 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_0 = 0bin000001 OR ROUNDFUNC_IN_0_0 = 0bin000010 OR ROUNDFUNC_IN_0_0 = 0bin000011 THEN ROUNDFUNC_OUT_0_0 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_0 = 0bin000101 OR ROUNDFUNC_IN_0_0 = 0bin000110 OR ROUNDFUNC_IN_0_0 = 0bin000111 THEN (ROUNDFUNC_OUT_0_0 = 0bin010000 AND period_0_0 = 0bin1) OR (ROUNDFUNC_OUT_0_0 = 0bin100000 AND period_0_0 = 0bin0) ELSE ROUNDFUNC_OUT_0_0 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_0 : BITVECTOR(6);
COPY_OUT1_0_0 : BITVECTOR(6);
COPY_OUT2_0_0 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_0 = COPY_IN_0_0);
ASSERT(COPY_OUT2_0_0 = COPY_IN_0_0);
XOR_IN1_0_0 : BITVECTOR(6);
XOR_IN2_0_0 : BITVECTOR(6);
XOR_OUT_0_0 : BITVECTOR(6);
XOR_key_0_0 : BITVECTOR(1);
ASSERT(XOR_OUT_0_0[5:5] = XOR_IN1_0_0[5:5] | XOR_IN2_0_0[5:5]);
ASSERT(XOR_OUT_0_0[4:4] = XOR_IN1_0_0[4:4] | XOR_IN2_0_0[4:4]);
ASSERT(XOR_OUT_0_0[3:3] = XOR_IN1_0_0[3:3] | XOR_IN2_0_0[3:3]);
ASSERT(XOR_OUT_0_0[2:2] = BVXOR(XOR_IN1_0_0[2:2] , XOR_IN2_0_0[2:2]));
ASSERT(XOR_IN1_0_0[1:0] = 0bin00 AND XOR_IN2_0_0[1:0] = 0bin00 => XOR_OUT_0_0[1:0] = 0bin00);
ASSERT(XOR_IN1_0_0[1:0] = 0bin00 AND XOR_IN2_0_0[1:0] = 0bin01 => XOR_OUT_0_0[1:0] = 0bin01);
ASSERT(XOR_IN2_0_0[1:0] = 0bin00 AND XOR_IN1_0_0[1:0] = 0bin01 => XOR_OUT_0_0[1:0] = 0bin01);
ASSERT(XOR_IN1_0_0[1:0] = 0bin00 AND XOR_IN2_0_0[1:0] = 0bin10 => XOR_OUT_0_0[1:0] = 0bin10);
ASSERT(XOR_IN2_0_0[1:0] = 0bin00 AND XOR_IN1_0_0[1:0] = 0bin10 => XOR_OUT_0_0[1:0] = 0bin10);
ASSERT(XOR_IN1_0_0[1:0] = 0bin00 AND XOR_IN2_0_0[1:0] = 0bin11 => XOR_OUT_0_0[1:0] = 0bin11);
ASSERT(XOR_IN2_0_0[1:0] = 0bin00 AND XOR_IN1_0_0[1:0] = 0bin11 => XOR_OUT_0_0[1:0] = 0bin11);
ASSERT(XOR_IN1_0_0[1:0] = 0bin01 AND XOR_IN2_0_0[1:0] = 0bin01 => XOR_OUT_0_0[1:0] = 0bin00);
ASSERT(XOR_IN1_0_0[1:0] = 0bin01 AND XOR_IN2_0_0[1:0] = 0bin10 => (XOR_OUT_0_0[1:0] = 0bin11 AND XOR_key_0_0 = 0bin0) OR (XOR_OUT_0_0[1:0] = 0bin00 AND XOR_key_0_0 = 0bin1));
ASSERT(XOR_IN2_0_0[1:0] = 0bin01 AND XOR_IN1_0_0[1:0] = 0bin10 => (XOR_OUT_0_0[1:0] = 0bin11 AND XOR_key_0_0 = 0bin0) OR (XOR_OUT_0_0[1:0] = 0bin00 AND XOR_key_0_0 = 0bin1));
ASSERT(XOR_IN1_0_0[1:0] = 0bin01 AND XOR_IN2_0_0[1:0] = 0bin11 => XOR_OUT_0_0[1:0] = 0bin10);
ASSERT(XOR_IN2_0_0[1:0] = 0bin01 AND XOR_IN1_0_0[1:0] = 0bin11 => XOR_OUT_0_0[1:0] = 0bin10);
ASSERT(XOR_IN1_0_0[1:0] = 0bin10 AND XOR_IN2_0_0[1:0] = 0bin10 => (XOR_OUT_0_0[1:0] = 0bin10 AND XOR_key_0_0 = 0bin0) OR (XOR_OUT_0_0[1:0] = 0bin00 AND XOR_key_0_0 = 0bin1));
ASSERT(XOR_IN1_0_0[1:0] = 0bin10 AND XOR_IN2_0_0[1:0] = 0bin11 => (XOR_OUT_0_0[1:0] = 0bin11 AND XOR_key_0_0 = 0bin0) OR (XOR_OUT_0_0[1:0] = 0bin01 AND XOR_key_0_0 = 0bin1) OR (XOR_OUT_0_0[1:0] = 0bin00 AND XOR_key_0_0 = 0bin1));
ASSERT(XOR_IN2_0_0[1:0] = 0bin10 AND XOR_IN1_0_0[1:0] = 0bin11 => (XOR_OUT_0_0[1:0] = 0bin11 AND XOR_key_0_0 = 0bin0) OR (XOR_OUT_0_0[1:0] = 0bin01 AND XOR_key_0_0 = 0bin1) OR (XOR_OUT_0_0[1:0] = 0bin00 AND XOR_key_0_0 = 0bin1));
ASSERT(XOR_IN1_0_0[1:0] = 0bin11 AND XOR_IN2_0_0[1:0] = 0bin11 => (XOR_OUT_0_0[1:0] = 0bin10 AND XOR_key_0_0 = 0bin0) OR (XOR_OUT_0_0[1:0] = 0bin00 AND XOR_key_0_0 = 0bin1));
x_0_2 : BITVECTOR(6);
y_0_2 : BITVECTOR(6);
x_1_2 : BITVECTOR(6);
y_1_2 : BITVECTOR(6);
x_2_2 : BITVECTOR(6);
y_2_2 : BITVECTOR(6);
x_3_2 : BITVECTOR(6);
y_3_2 : BITVECTOR(6);
ROUNDFUNC_IN_0_1 : BITVECTOR(6);
ROUNDFUNC_OUT_0_1 : BITVECTOR(6);
period_0_1 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_1 = 0bin000000 THEN ROUNDFUNC_OUT_0_1 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_1 = 0bin010000 THEN ROUNDFUNC_OUT_0_1 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_1 = 0bin000100 OR ROUNDFUNC_IN_0_1 = 0bin001000 OR ROUNDFUNC_IN_0_1 = 0bin001100 THEN ROUNDFUNC_OUT_0_1 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_1 = 0bin000001 OR ROUNDFUNC_IN_0_1 = 0bin000010 OR ROUNDFUNC_IN_0_1 = 0bin000011 THEN ROUNDFUNC_OUT_0_1 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_1 = 0bin000101 OR ROUNDFUNC_IN_0_1 = 0bin000110 OR ROUNDFUNC_IN_0_1 = 0bin000111 THEN (ROUNDFUNC_OUT_0_1 = 0bin010000 AND period_0_1 = 0bin1) OR (ROUNDFUNC_OUT_0_1 = 0bin100000 AND period_0_1 = 0bin0) ELSE ROUNDFUNC_OUT_0_1 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_1 : BITVECTOR(6);
COPY_OUT1_0_1 : BITVECTOR(6);
COPY_OUT2_0_1 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_1 = COPY_IN_0_1);
ASSERT(COPY_OUT2_0_1 = COPY_IN_0_1);
XOR_IN1_0_1 : BITVECTOR(6);
XOR_IN2_0_1 : BITVECTOR(6);
XOR_OUT_0_1 : BITVECTOR(6);
XOR_key_0_1 : BITVECTOR(1);
ASSERT(XOR_OUT_0_1[5:5] = XOR_IN1_0_1[5:5] | XOR_IN2_0_1[5:5]);
ASSERT(XOR_OUT_0_1[4:4] = XOR_IN1_0_1[4:4] | XOR_IN2_0_1[4:4]);
ASSERT(XOR_OUT_0_1[3:3] = XOR_IN1_0_1[3:3] | XOR_IN2_0_1[3:3]);
ASSERT(XOR_OUT_0_1[2:2] = BVXOR(XOR_IN1_0_1[2:2] , XOR_IN2_0_1[2:2]));
ASSERT(XOR_IN1_0_1[1:0] = 0bin00 AND XOR_IN2_0_1[1:0] = 0bin00 => XOR_OUT_0_1[1:0] = 0bin00);
ASSERT(XOR_IN1_0_1[1:0] = 0bin00 AND XOR_IN2_0_1[1:0] = 0bin01 => XOR_OUT_0_1[1:0] = 0bin01);
ASSERT(XOR_IN2_0_1[1:0] = 0bin00 AND XOR_IN1_0_1[1:0] = 0bin01 => XOR_OUT_0_1[1:0] = 0bin01);
ASSERT(XOR_IN1_0_1[1:0] = 0bin00 AND XOR_IN2_0_1[1:0] = 0bin10 => XOR_OUT_0_1[1:0] = 0bin10);
ASSERT(XOR_IN2_0_1[1:0] = 0bin00 AND XOR_IN1_0_1[1:0] = 0bin10 => XOR_OUT_0_1[1:0] = 0bin10);
ASSERT(XOR_IN1_0_1[1:0] = 0bin00 AND XOR_IN2_0_1[1:0] = 0bin11 => XOR_OUT_0_1[1:0] = 0bin11);
ASSERT(XOR_IN2_0_1[1:0] = 0bin00 AND XOR_IN1_0_1[1:0] = 0bin11 => XOR_OUT_0_1[1:0] = 0bin11);
ASSERT(XOR_IN1_0_1[1:0] = 0bin01 AND XOR_IN2_0_1[1:0] = 0bin01 => XOR_OUT_0_1[1:0] = 0bin00);
ASSERT(XOR_IN1_0_1[1:0] = 0bin01 AND XOR_IN2_0_1[1:0] = 0bin10 => (XOR_OUT_0_1[1:0] = 0bin11 AND XOR_key_0_1 = 0bin0) OR (XOR_OUT_0_1[1:0] = 0bin00 AND XOR_key_0_1 = 0bin1));
ASSERT(XOR_IN2_0_1[1:0] = 0bin01 AND XOR_IN1_0_1[1:0] = 0bin10 => (XOR_OUT_0_1[1:0] = 0bin11 AND XOR_key_0_1 = 0bin0) OR (XOR_OUT_0_1[1:0] = 0bin00 AND XOR_key_0_1 = 0bin1));
ASSERT(XOR_IN1_0_1[1:0] = 0bin01 AND XOR_IN2_0_1[1:0] = 0bin11 => XOR_OUT_0_1[1:0] = 0bin10);
ASSERT(XOR_IN2_0_1[1:0] = 0bin01 AND XOR_IN1_0_1[1:0] = 0bin11 => XOR_OUT_0_1[1:0] = 0bin10);
ASSERT(XOR_IN1_0_1[1:0] = 0bin10 AND XOR_IN2_0_1[1:0] = 0bin10 => (XOR_OUT_0_1[1:0] = 0bin10 AND XOR_key_0_1 = 0bin0) OR (XOR_OUT_0_1[1:0] = 0bin00 AND XOR_key_0_1 = 0bin1));
ASSERT(XOR_IN1_0_1[1:0] = 0bin10 AND XOR_IN2_0_1[1:0] = 0bin11 => (XOR_OUT_0_1[1:0] = 0bin11 AND XOR_key_0_1 = 0bin0) OR (XOR_OUT_0_1[1:0] = 0bin01 AND XOR_key_0_1 = 0bin1) OR (XOR_OUT_0_1[1:0] = 0bin00 AND XOR_key_0_1 = 0bin1));
ASSERT(XOR_IN2_0_1[1:0] = 0bin10 AND XOR_IN1_0_1[1:0] = 0bin11 => (XOR_OUT_0_1[1:0] = 0bin11 AND XOR_key_0_1 = 0bin0) OR (XOR_OUT_0_1[1:0] = 0bin01 AND XOR_key_0_1 = 0bin1) OR (XOR_OUT_0_1[1:0] = 0bin00 AND XOR_key_0_1 = 0bin1));
ASSERT(XOR_IN1_0_1[1:0] = 0bin11 AND XOR_IN2_0_1[1:0] = 0bin11 => (XOR_OUT_0_1[1:0] = 0bin10 AND XOR_key_0_1 = 0bin0) OR (XOR_OUT_0_1[1:0] = 0bin00 AND XOR_key_0_1 = 0bin1));
x_0_3 : BITVECTOR(6);
y_0_3 : BITVECTOR(6);
x_1_3 : BITVECTOR(6);
y_1_3 : BITVECTOR(6);
x_2_3 : BITVECTOR(6);
y_2_3 : BITVECTOR(6);
x_3_3 : BITVECTOR(6);
y_3_3 : BITVECTOR(6);
ROUNDFUNC_IN_0_2 : BITVECTOR(6);
ROUNDFUNC_OUT_0_2 : BITVECTOR(6);
period_0_2 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_2 = 0bin000000 THEN ROUNDFUNC_OUT_0_2 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_2 = 0bin010000 THEN ROUNDFUNC_OUT_0_2 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_2 = 0bin000100 OR ROUNDFUNC_IN_0_2 = 0bin001000 OR ROUNDFUNC_IN_0_2 = 0bin001100 THEN ROUNDFUNC_OUT_0_2 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_2 = 0bin000001 OR ROUNDFUNC_IN_0_2 = 0bin000010 OR ROUNDFUNC_IN_0_2 = 0bin000011 THEN ROUNDFUNC_OUT_0_2 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_2 = 0bin000101 OR ROUNDFUNC_IN_0_2 = 0bin000110 OR ROUNDFUNC_IN_0_2 = 0bin000111 THEN (ROUNDFUNC_OUT_0_2 = 0bin010000 AND period_0_2 = 0bin1) OR (ROUNDFUNC_OUT_0_2 = 0bin100000 AND period_0_2 = 0bin0) ELSE ROUNDFUNC_OUT_0_2 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_2 : BITVECTOR(6);
COPY_OUT1_0_2 : BITVECTOR(6);
COPY_OUT2_0_2 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_2 = COPY_IN_0_2);
ASSERT(COPY_OUT2_0_2 = COPY_IN_0_2);
XOR_IN1_0_2 : BITVECTOR(6);
XOR_IN2_0_2 : BITVECTOR(6);
XOR_OUT_0_2 : BITVECTOR(6);
XOR_key_0_2 : BITVECTOR(1);
ASSERT(XOR_OUT_0_2[5:5] = XOR_IN1_0_2[5:5] | XOR_IN2_0_2[5:5]);
ASSERT(XOR_OUT_0_2[4:4] = XOR_IN1_0_2[4:4] | XOR_IN2_0_2[4:4]);
ASSERT(XOR_OUT_0_2[3:3] = XOR_IN1_0_2[3:3] | XOR_IN2_0_2[3:3]);
ASSERT(XOR_OUT_0_2[2:2] = BVXOR(XOR_IN1_0_2[2:2] , XOR_IN2_0_2[2:2]));
ASSERT(XOR_IN1_0_2[1:0] = 0bin00 AND XOR_IN2_0_2[1:0] = 0bin00 => XOR_OUT_0_2[1:0] = 0bin00);
ASSERT(XOR_IN1_0_2[1:0] = 0bin00 AND XOR_IN2_0_2[1:0] = 0bin01 => XOR_OUT_0_2[1:0] = 0bin01);
ASSERT(XOR_IN2_0_2[1:0] = 0bin00 AND XOR_IN1_0_2[1:0] = 0bin01 => XOR_OUT_0_2[1:0] = 0bin01);
ASSERT(XOR_IN1_0_2[1:0] = 0bin00 AND XOR_IN2_0_2[1:0] = 0bin10 => XOR_OUT_0_2[1:0] = 0bin10);
ASSERT(XOR_IN2_0_2[1:0] = 0bin00 AND XOR_IN1_0_2[1:0] = 0bin10 => XOR_OUT_0_2[1:0] = 0bin10);
ASSERT(XOR_IN1_0_2[1:0] = 0bin00 AND XOR_IN2_0_2[1:0] = 0bin11 => XOR_OUT_0_2[1:0] = 0bin11);
ASSERT(XOR_IN2_0_2[1:0] = 0bin00 AND XOR_IN1_0_2[1:0] = 0bin11 => XOR_OUT_0_2[1:0] = 0bin11);
ASSERT(XOR_IN1_0_2[1:0] = 0bin01 AND XOR_IN2_0_2[1:0] = 0bin01 => XOR_OUT_0_2[1:0] = 0bin00);
ASSERT(XOR_IN1_0_2[1:0] = 0bin01 AND XOR_IN2_0_2[1:0] = 0bin10 => (XOR_OUT_0_2[1:0] = 0bin11 AND XOR_key_0_2 = 0bin0) OR (XOR_OUT_0_2[1:0] = 0bin00 AND XOR_key_0_2 = 0bin1));
ASSERT(XOR_IN2_0_2[1:0] = 0bin01 AND XOR_IN1_0_2[1:0] = 0bin10 => (XOR_OUT_0_2[1:0] = 0bin11 AND XOR_key_0_2 = 0bin0) OR (XOR_OUT_0_2[1:0] = 0bin00 AND XOR_key_0_2 = 0bin1));
ASSERT(XOR_IN1_0_2[1:0] = 0bin01 AND XOR_IN2_0_2[1:0] = 0bin11 => XOR_OUT_0_2[1:0] = 0bin10);
ASSERT(XOR_IN2_0_2[1:0] = 0bin01 AND XOR_IN1_0_2[1:0] = 0bin11 => XOR_OUT_0_2[1:0] = 0bin10);
ASSERT(XOR_IN1_0_2[1:0] = 0bin10 AND XOR_IN2_0_2[1:0] = 0bin10 => (XOR_OUT_0_2[1:0] = 0bin10 AND XOR_key_0_2 = 0bin0) OR (XOR_OUT_0_2[1:0] = 0bin00 AND XOR_key_0_2 = 0bin1));
ASSERT(XOR_IN1_0_2[1:0] = 0bin10 AND XOR_IN2_0_2[1:0] = 0bin11 => (XOR_OUT_0_2[1:0] = 0bin11 AND XOR_key_0_2 = 0bin0) OR (XOR_OUT_0_2[1:0] = 0bin01 AND XOR_key_0_2 = 0bin1) OR (XOR_OUT_0_2[1:0] = 0bin00 AND XOR_key_0_2 = 0bin1));
ASSERT(XOR_IN2_0_2[1:0] = 0bin10 AND XOR_IN1_0_2[1:0] = 0bin11 => (XOR_OUT_0_2[1:0] = 0bin11 AND XOR_key_0_2 = 0bin0) OR (XOR_OUT_0_2[1:0] = 0bin01 AND XOR_key_0_2 = 0bin1) OR (XOR_OUT_0_2[1:0] = 0bin00 AND XOR_key_0_2 = 0bin1));
ASSERT(XOR_IN1_0_2[1:0] = 0bin11 AND XOR_IN2_0_2[1:0] = 0bin11 => (XOR_OUT_0_2[1:0] = 0bin10 AND XOR_key_0_2 = 0bin0) OR (XOR_OUT_0_2[1:0] = 0bin00 AND XOR_key_0_2 = 0bin1));
x_0_4 : BITVECTOR(6);
y_0_4 : BITVECTOR(6);
x_1_4 : BITVECTOR(6);
y_1_4 : BITVECTOR(6);
x_2_4 : BITVECTOR(6);
y_2_4 : BITVECTOR(6);
x_3_4 : BITVECTOR(6);
y_3_4 : BITVECTOR(6);
ROUNDFUNC_IN_0_3 : BITVECTOR(6);
ROUNDFUNC_OUT_0_3 : BITVECTOR(6);
period_0_3 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_3 = 0bin000000 THEN ROUNDFUNC_OUT_0_3 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_3 = 0bin010000 THEN ROUNDFUNC_OUT_0_3 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_3 = 0bin000100 OR ROUNDFUNC_IN_0_3 = 0bin001000 OR ROUNDFUNC_IN_0_3 = 0bin001100 THEN ROUNDFUNC_OUT_0_3 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_3 = 0bin000001 OR ROUNDFUNC_IN_0_3 = 0bin000010 OR ROUNDFUNC_IN_0_3 = 0bin000011 THEN ROUNDFUNC_OUT_0_3 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_3 = 0bin000101 OR ROUNDFUNC_IN_0_3 = 0bin000110 OR ROUNDFUNC_IN_0_3 = 0bin000111 THEN (ROUNDFUNC_OUT_0_3 = 0bin010000 AND period_0_3 = 0bin1) OR (ROUNDFUNC_OUT_0_3 = 0bin100000 AND period_0_3 = 0bin0) ELSE ROUNDFUNC_OUT_0_3 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_3 : BITVECTOR(6);
COPY_OUT1_0_3 : BITVECTOR(6);
COPY_OUT2_0_3 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_3 = COPY_IN_0_3);
ASSERT(COPY_OUT2_0_3 = COPY_IN_0_3);
XOR_IN1_0_3 : BITVECTOR(6);
XOR_IN2_0_3 : BITVECTOR(6);
XOR_OUT_0_3 : BITVECTOR(6);
XOR_key_0_3 : BITVECTOR(1);
ASSERT(XOR_OUT_0_3[5:5] = XOR_IN1_0_3[5:5] | XOR_IN2_0_3[5:5]);
ASSERT(XOR_OUT_0_3[4:4] = XOR_IN1_0_3[4:4] | XOR_IN2_0_3[4:4]);
ASSERT(XOR_OUT_0_3[3:3] = XOR_IN1_0_3[3:3] | XOR_IN2_0_3[3:3]);
ASSERT(XOR_OUT_0_3[2:2] = BVXOR(XOR_IN1_0_3[2:2] , XOR_IN2_0_3[2:2]));
ASSERT(XOR_IN1_0_3[1:0] = 0bin00 AND XOR_IN2_0_3[1:0] = 0bin00 => XOR_OUT_0_3[1:0] = 0bin00);
ASSERT(XOR_IN1_0_3[1:0] = 0bin00 AND XOR_IN2_0_3[1:0] = 0bin01 => XOR_OUT_0_3[1:0] = 0bin01);
ASSERT(XOR_IN2_0_3[1:0] = 0bin00 AND XOR_IN1_0_3[1:0] = 0bin01 => XOR_OUT_0_3[1:0] = 0bin01);
ASSERT(XOR_IN1_0_3[1:0] = 0bin00 AND XOR_IN2_0_3[1:0] = 0bin10 => XOR_OUT_0_3[1:0] = 0bin10);
ASSERT(XOR_IN2_0_3[1:0] = 0bin00 AND XOR_IN1_0_3[1:0] = 0bin10 => XOR_OUT_0_3[1:0] = 0bin10);
ASSERT(XOR_IN1_0_3[1:0] = 0bin00 AND XOR_IN2_0_3[1:0] = 0bin11 => XOR_OUT_0_3[1:0] = 0bin11);
ASSERT(XOR_IN2_0_3[1:0] = 0bin00 AND XOR_IN1_0_3[1:0] = 0bin11 => XOR_OUT_0_3[1:0] = 0bin11);
ASSERT(XOR_IN1_0_3[1:0] = 0bin01 AND XOR_IN2_0_3[1:0] = 0bin01 => XOR_OUT_0_3[1:0] = 0bin00);
ASSERT(XOR_IN1_0_3[1:0] = 0bin01 AND XOR_IN2_0_3[1:0] = 0bin10 => (XOR_OUT_0_3[1:0] = 0bin11 AND XOR_key_0_3 = 0bin0) OR (XOR_OUT_0_3[1:0] = 0bin00 AND XOR_key_0_3 = 0bin1));
ASSERT(XOR_IN2_0_3[1:0] = 0bin01 AND XOR_IN1_0_3[1:0] = 0bin10 => (XOR_OUT_0_3[1:0] = 0bin11 AND XOR_key_0_3 = 0bin0) OR (XOR_OUT_0_3[1:0] = 0bin00 AND XOR_key_0_3 = 0bin1));
ASSERT(XOR_IN1_0_3[1:0] = 0bin01 AND XOR_IN2_0_3[1:0] = 0bin11 => XOR_OUT_0_3[1:0] = 0bin10);
ASSERT(XOR_IN2_0_3[1:0] = 0bin01 AND XOR_IN1_0_3[1:0] = 0bin11 => XOR_OUT_0_3[1:0] = 0bin10);
ASSERT(XOR_IN1_0_3[1:0] = 0bin10 AND XOR_IN2_0_3[1:0] = 0bin10 => (XOR_OUT_0_3[1:0] = 0bin10 AND XOR_key_0_3 = 0bin0) OR (XOR_OUT_0_3[1:0] = 0bin00 AND XOR_key_0_3 = 0bin1));
ASSERT(XOR_IN1_0_3[1:0] = 0bin10 AND XOR_IN2_0_3[1:0] = 0bin11 => (XOR_OUT_0_3[1:0] = 0bin11 AND XOR_key_0_3 = 0bin0) OR (XOR_OUT_0_3[1:0] = 0bin01 AND XOR_key_0_3 = 0bin1) OR (XOR_OUT_0_3[1:0] = 0bin00 AND XOR_key_0_3 = 0bin1));
ASSERT(XOR_IN2_0_3[1:0] = 0bin10 AND XOR_IN1_0_3[1:0] = 0bin11 => (XOR_OUT_0_3[1:0] = 0bin11 AND XOR_key_0_3 = 0bin0) OR (XOR_OUT_0_3[1:0] = 0bin01 AND XOR_key_0_3 = 0bin1) OR (XOR_OUT_0_3[1:0] = 0bin00 AND XOR_key_0_3 = 0bin1));
ASSERT(XOR_IN1_0_3[1:0] = 0bin11 AND XOR_IN2_0_3[1:0] = 0bin11 => (XOR_OUT_0_3[1:0] = 0bin10 AND XOR_key_0_3 = 0bin0) OR (XOR_OUT_0_3[1:0] = 0bin00 AND XOR_key_0_3 = 0bin1));
x_0_5 : BITVECTOR(6);
y_0_5 : BITVECTOR(6);
x_1_5 : BITVECTOR(6);
y_1_5 : BITVECTOR(6);
x_2_5 : BITVECTOR(6);
y_2_5 : BITVECTOR(6);
x_3_5 : BITVECTOR(6);
y_3_5 : BITVECTOR(6);
ROUNDFUNC_IN_0_4 : BITVECTOR(6);
ROUNDFUNC_OUT_0_4 : BITVECTOR(6);
period_0_4 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_4 = 0bin000000 THEN ROUNDFUNC_OUT_0_4 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_4 = 0bin010000 THEN ROUNDFUNC_OUT_0_4 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_4 = 0bin000100 OR ROUNDFUNC_IN_0_4 = 0bin001000 OR ROUNDFUNC_IN_0_4 = 0bin001100 THEN ROUNDFUNC_OUT_0_4 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_4 = 0bin000001 OR ROUNDFUNC_IN_0_4 = 0bin000010 OR ROUNDFUNC_IN_0_4 = 0bin000011 THEN ROUNDFUNC_OUT_0_4 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_4 = 0bin000101 OR ROUNDFUNC_IN_0_4 = 0bin000110 OR ROUNDFUNC_IN_0_4 = 0bin000111 THEN (ROUNDFUNC_OUT_0_4 = 0bin010000 AND period_0_4 = 0bin1) OR (ROUNDFUNC_OUT_0_4 = 0bin100000 AND period_0_4 = 0bin0) ELSE ROUNDFUNC_OUT_0_4 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_4 : BITVECTOR(6);
COPY_OUT1_0_4 : BITVECTOR(6);
COPY_OUT2_0_4 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_4 = COPY_IN_0_4);
ASSERT(COPY_OUT2_0_4 = COPY_IN_0_4);
XOR_IN1_0_4 : BITVECTOR(6);
XOR_IN2_0_4 : BITVECTOR(6);
XOR_OUT_0_4 : BITVECTOR(6);
XOR_key_0_4 : BITVECTOR(1);
ASSERT(XOR_OUT_0_4[5:5] = XOR_IN1_0_4[5:5] | XOR_IN2_0_4[5:5]);
ASSERT(XOR_OUT_0_4[4:4] = XOR_IN1_0_4[4:4] | XOR_IN2_0_4[4:4]);
ASSERT(XOR_OUT_0_4[3:3] = XOR_IN1_0_4[3:3] | XOR_IN2_0_4[3:3]);
ASSERT(XOR_OUT_0_4[2:2] = BVXOR(XOR_IN1_0_4[2:2] , XOR_IN2_0_4[2:2]));
ASSERT(XOR_IN1_0_4[1:0] = 0bin00 AND XOR_IN2_0_4[1:0] = 0bin00 => XOR_OUT_0_4[1:0] = 0bin00);
ASSERT(XOR_IN1_0_4[1:0] = 0bin00 AND XOR_IN2_0_4[1:0] = 0bin01 => XOR_OUT_0_4[1:0] = 0bin01);
ASSERT(XOR_IN2_0_4[1:0] = 0bin00 AND XOR_IN1_0_4[1:0] = 0bin01 => XOR_OUT_0_4[1:0] = 0bin01);
ASSERT(XOR_IN1_0_4[1:0] = 0bin00 AND XOR_IN2_0_4[1:0] = 0bin10 => XOR_OUT_0_4[1:0] = 0bin10);
ASSERT(XOR_IN2_0_4[1:0] = 0bin00 AND XOR_IN1_0_4[1:0] = 0bin10 => XOR_OUT_0_4[1:0] = 0bin10);
ASSERT(XOR_IN1_0_4[1:0] = 0bin00 AND XOR_IN2_0_4[1:0] = 0bin11 => XOR_OUT_0_4[1:0] = 0bin11);
ASSERT(XOR_IN2_0_4[1:0] = 0bin00 AND XOR_IN1_0_4[1:0] = 0bin11 => XOR_OUT_0_4[1:0] = 0bin11);
ASSERT(XOR_IN1_0_4[1:0] = 0bin01 AND XOR_IN2_0_4[1:0] = 0bin01 => XOR_OUT_0_4[1:0] = 0bin00);
ASSERT(XOR_IN1_0_4[1:0] = 0bin01 AND XOR_IN2_0_4[1:0] = 0bin10 => (XOR_OUT_0_4[1:0] = 0bin11 AND XOR_key_0_4 = 0bin0) OR (XOR_OUT_0_4[1:0] = 0bin00 AND XOR_key_0_4 = 0bin1));
ASSERT(XOR_IN2_0_4[1:0] = 0bin01 AND XOR_IN1_0_4[1:0] = 0bin10 => (XOR_OUT_0_4[1:0] = 0bin11 AND XOR_key_0_4 = 0bin0) OR (XOR_OUT_0_4[1:0] = 0bin00 AND XOR_key_0_4 = 0bin1));
ASSERT(XOR_IN1_0_4[1:0] = 0bin01 AND XOR_IN2_0_4[1:0] = 0bin11 => XOR_OUT_0_4[1:0] = 0bin10);
ASSERT(XOR_IN2_0_4[1:0] = 0bin01 AND XOR_IN1_0_4[1:0] = 0bin11 => XOR_OUT_0_4[1:0] = 0bin10);
ASSERT(XOR_IN1_0_4[1:0] = 0bin10 AND XOR_IN2_0_4[1:0] = 0bin10 => (XOR_OUT_0_4[1:0] = 0bin10 AND XOR_key_0_4 = 0bin0) OR (XOR_OUT_0_4[1:0] = 0bin00 AND XOR_key_0_4 = 0bin1));
ASSERT(XOR_IN1_0_4[1:0] = 0bin10 AND XOR_IN2_0_4[1:0] = 0bin11 => (XOR_OUT_0_4[1:0] = 0bin11 AND XOR_key_0_4 = 0bin0) OR (XOR_OUT_0_4[1:0] = 0bin01 AND XOR_key_0_4 = 0bin1) OR (XOR_OUT_0_4[1:0] = 0bin00 AND XOR_key_0_4 = 0bin1));
ASSERT(XOR_IN2_0_4[1:0] = 0bin10 AND XOR_IN1_0_4[1:0] = 0bin11 => (XOR_OUT_0_4[1:0] = 0bin11 AND XOR_key_0_4 = 0bin0) OR (XOR_OUT_0_4[1:0] = 0bin01 AND XOR_key_0_4 = 0bin1) OR (XOR_OUT_0_4[1:0] = 0bin00 AND XOR_key_0_4 = 0bin1));
ASSERT(XOR_IN1_0_4[1:0] = 0bin11 AND XOR_IN2_0_4[1:0] = 0bin11 => (XOR_OUT_0_4[1:0] = 0bin10 AND XOR_key_0_4 = 0bin0) OR (XOR_OUT_0_4[1:0] = 0bin00 AND XOR_key_0_4 = 0bin1));
x_0_6 : BITVECTOR(6);
y_0_6 : BITVECTOR(6);
x_1_6 : BITVECTOR(6);
y_1_6 : BITVECTOR(6);
x_2_6 : BITVECTOR(6);
y_2_6 : BITVECTOR(6);
x_3_6 : BITVECTOR(6);
y_3_6 : BITVECTOR(6);
ROUNDFUNC_IN_0_5 : BITVECTOR(6);
ROUNDFUNC_OUT_0_5 : BITVECTOR(6);
period_0_5 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_5 = 0bin000000 THEN ROUNDFUNC_OUT_0_5 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_5 = 0bin010000 THEN ROUNDFUNC_OUT_0_5 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_5 = 0bin000100 OR ROUNDFUNC_IN_0_5 = 0bin001000 OR ROUNDFUNC_IN_0_5 = 0bin001100 THEN ROUNDFUNC_OUT_0_5 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_5 = 0bin000001 OR ROUNDFUNC_IN_0_5 = 0bin000010 OR ROUNDFUNC_IN_0_5 = 0bin000011 THEN ROUNDFUNC_OUT_0_5 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_5 = 0bin000101 OR ROUNDFUNC_IN_0_5 = 0bin000110 OR ROUNDFUNC_IN_0_5 = 0bin000111 THEN (ROUNDFUNC_OUT_0_5 = 0bin010000 AND period_0_5 = 0bin1) OR (ROUNDFUNC_OUT_0_5 = 0bin100000 AND period_0_5 = 0bin0) ELSE ROUNDFUNC_OUT_0_5 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_5 : BITVECTOR(6);
COPY_OUT1_0_5 : BITVECTOR(6);
COPY_OUT2_0_5 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_5 = COPY_IN_0_5);
ASSERT(COPY_OUT2_0_5 = COPY_IN_0_5);
XOR_IN1_0_5 : BITVECTOR(6);
XOR_IN2_0_5 : BITVECTOR(6);
XOR_OUT_0_5 : BITVECTOR(6);
XOR_key_0_5 : BITVECTOR(1);
ASSERT(XOR_OUT_0_5[5:5] = XOR_IN1_0_5[5:5] | XOR_IN2_0_5[5:5]);
ASSERT(XOR_OUT_0_5[4:4] = XOR_IN1_0_5[4:4] | XOR_IN2_0_5[4:4]);
ASSERT(XOR_OUT_0_5[3:3] = XOR_IN1_0_5[3:3] | XOR_IN2_0_5[3:3]);
ASSERT(XOR_OUT_0_5[2:2] = BVXOR(XOR_IN1_0_5[2:2] , XOR_IN2_0_5[2:2]));
ASSERT(XOR_IN1_0_5[1:0] = 0bin00 AND XOR_IN2_0_5[1:0] = 0bin00 => XOR_OUT_0_5[1:0] = 0bin00);
ASSERT(XOR_IN1_0_5[1:0] = 0bin00 AND XOR_IN2_0_5[1:0] = 0bin01 => XOR_OUT_0_5[1:0] = 0bin01);
ASSERT(XOR_IN2_0_5[1:0] = 0bin00 AND XOR_IN1_0_5[1:0] = 0bin01 => XOR_OUT_0_5[1:0] = 0bin01);
ASSERT(XOR_IN1_0_5[1:0] = 0bin00 AND XOR_IN2_0_5[1:0] = 0bin10 => XOR_OUT_0_5[1:0] = 0bin10);
ASSERT(XOR_IN2_0_5[1:0] = 0bin00 AND XOR_IN1_0_5[1:0] = 0bin10 => XOR_OUT_0_5[1:0] = 0bin10);
ASSERT(XOR_IN1_0_5[1:0] = 0bin00 AND XOR_IN2_0_5[1:0] = 0bin11 => XOR_OUT_0_5[1:0] = 0bin11);
ASSERT(XOR_IN2_0_5[1:0] = 0bin00 AND XOR_IN1_0_5[1:0] = 0bin11 => XOR_OUT_0_5[1:0] = 0bin11);
ASSERT(XOR_IN1_0_5[1:0] = 0bin01 AND XOR_IN2_0_5[1:0] = 0bin01 => XOR_OUT_0_5[1:0] = 0bin00);
ASSERT(XOR_IN1_0_5[1:0] = 0bin01 AND XOR_IN2_0_5[1:0] = 0bin10 => (XOR_OUT_0_5[1:0] = 0bin11 AND XOR_key_0_5 = 0bin0) OR (XOR_OUT_0_5[1:0] = 0bin00 AND XOR_key_0_5 = 0bin1));
ASSERT(XOR_IN2_0_5[1:0] = 0bin01 AND XOR_IN1_0_5[1:0] = 0bin10 => (XOR_OUT_0_5[1:0] = 0bin11 AND XOR_key_0_5 = 0bin0) OR (XOR_OUT_0_5[1:0] = 0bin00 AND XOR_key_0_5 = 0bin1));
ASSERT(XOR_IN1_0_5[1:0] = 0bin01 AND XOR_IN2_0_5[1:0] = 0bin11 => XOR_OUT_0_5[1:0] = 0bin10);
ASSERT(XOR_IN2_0_5[1:0] = 0bin01 AND XOR_IN1_0_5[1:0] = 0bin11 => XOR_OUT_0_5[1:0] = 0bin10);
ASSERT(XOR_IN1_0_5[1:0] = 0bin10 AND XOR_IN2_0_5[1:0] = 0bin10 => (XOR_OUT_0_5[1:0] = 0bin10 AND XOR_key_0_5 = 0bin0) OR (XOR_OUT_0_5[1:0] = 0bin00 AND XOR_key_0_5 = 0bin1));
ASSERT(XOR_IN1_0_5[1:0] = 0bin10 AND XOR_IN2_0_5[1:0] = 0bin11 => (XOR_OUT_0_5[1:0] = 0bin11 AND XOR_key_0_5 = 0bin0) OR (XOR_OUT_0_5[1:0] = 0bin01 AND XOR_key_0_5 = 0bin1) OR (XOR_OUT_0_5[1:0] = 0bin00 AND XOR_key_0_5 = 0bin1));
ASSERT(XOR_IN2_0_5[1:0] = 0bin10 AND XOR_IN1_0_5[1:0] = 0bin11 => (XOR_OUT_0_5[1:0] = 0bin11 AND XOR_key_0_5 = 0bin0) OR (XOR_OUT_0_5[1:0] = 0bin01 AND XOR_key_0_5 = 0bin1) OR (XOR_OUT_0_5[1:0] = 0bin00 AND XOR_key_0_5 = 0bin1));
ASSERT(XOR_IN1_0_5[1:0] = 0bin11 AND XOR_IN2_0_5[1:0] = 0bin11 => (XOR_OUT_0_5[1:0] = 0bin10 AND XOR_key_0_5 = 0bin0) OR (XOR_OUT_0_5[1:0] = 0bin00 AND XOR_key_0_5 = 0bin1));
x_0_7 : BITVECTOR(6);
y_0_7 : BITVECTOR(6);
x_1_7 : BITVECTOR(6);
y_1_7 : BITVECTOR(6);
x_2_7 : BITVECTOR(6);
y_2_7 : BITVECTOR(6);
x_3_7 : BITVECTOR(6);
y_3_7 : BITVECTOR(6);
ROUNDFUNC_IN_0_6 : BITVECTOR(6);
ROUNDFUNC_OUT_0_6 : BITVECTOR(6);
period_0_6 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_6 = 0bin000000 THEN ROUNDFUNC_OUT_0_6 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_6 = 0bin010000 THEN ROUNDFUNC_OUT_0_6 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_6 = 0bin000100 OR ROUNDFUNC_IN_0_6 = 0bin001000 OR ROUNDFUNC_IN_0_6 = 0bin001100 THEN ROUNDFUNC_OUT_0_6 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_6 = 0bin000001 OR ROUNDFUNC_IN_0_6 = 0bin000010 OR ROUNDFUNC_IN_0_6 = 0bin000011 THEN ROUNDFUNC_OUT_0_6 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_6 = 0bin000101 OR ROUNDFUNC_IN_0_6 = 0bin000110 OR ROUNDFUNC_IN_0_6 = 0bin000111 THEN (ROUNDFUNC_OUT_0_6 = 0bin010000 AND period_0_6 = 0bin1) OR (ROUNDFUNC_OUT_0_6 = 0bin100000 AND period_0_6 = 0bin0) ELSE ROUNDFUNC_OUT_0_6 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_6 : BITVECTOR(6);
COPY_OUT1_0_6 : BITVECTOR(6);
COPY_OUT2_0_6 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_6 = COPY_IN_0_6);
ASSERT(COPY_OUT2_0_6 = COPY_IN_0_6);
XOR_IN1_0_6 : BITVECTOR(6);
XOR_IN2_0_6 : BITVECTOR(6);
XOR_OUT_0_6 : BITVECTOR(6);
XOR_key_0_6 : BITVECTOR(1);
ASSERT(XOR_OUT_0_6[5:5] = XOR_IN1_0_6[5:5] | XOR_IN2_0_6[5:5]);
ASSERT(XOR_OUT_0_6[4:4] = XOR_IN1_0_6[4:4] | XOR_IN2_0_6[4:4]);
ASSERT(XOR_OUT_0_6[3:3] = XOR_IN1_0_6[3:3] | XOR_IN2_0_6[3:3]);
ASSERT(XOR_OUT_0_6[2:2] = BVXOR(XOR_IN1_0_6[2:2] , XOR_IN2_0_6[2:2]));
ASSERT(XOR_IN1_0_6[1:0] = 0bin00 AND XOR_IN2_0_6[1:0] = 0bin00 => XOR_OUT_0_6[1:0] = 0bin00);
ASSERT(XOR_IN1_0_6[1:0] = 0bin00 AND XOR_IN2_0_6[1:0] = 0bin01 => XOR_OUT_0_6[1:0] = 0bin01);
ASSERT(XOR_IN2_0_6[1:0] = 0bin00 AND XOR_IN1_0_6[1:0] = 0bin01 => XOR_OUT_0_6[1:0] = 0bin01);
ASSERT(XOR_IN1_0_6[1:0] = 0bin00 AND XOR_IN2_0_6[1:0] = 0bin10 => XOR_OUT_0_6[1:0] = 0bin10);
ASSERT(XOR_IN2_0_6[1:0] = 0bin00 AND XOR_IN1_0_6[1:0] = 0bin10 => XOR_OUT_0_6[1:0] = 0bin10);
ASSERT(XOR_IN1_0_6[1:0] = 0bin00 AND XOR_IN2_0_6[1:0] = 0bin11 => XOR_OUT_0_6[1:0] = 0bin11);
ASSERT(XOR_IN2_0_6[1:0] = 0bin00 AND XOR_IN1_0_6[1:0] = 0bin11 => XOR_OUT_0_6[1:0] = 0bin11);
ASSERT(XOR_IN1_0_6[1:0] = 0bin01 AND XOR_IN2_0_6[1:0] = 0bin01 => XOR_OUT_0_6[1:0] = 0bin00);
ASSERT(XOR_IN1_0_6[1:0] = 0bin01 AND XOR_IN2_0_6[1:0] = 0bin10 => (XOR_OUT_0_6[1:0] = 0bin11 AND XOR_key_0_6 = 0bin0) OR (XOR_OUT_0_6[1:0] = 0bin00 AND XOR_key_0_6 = 0bin1));
ASSERT(XOR_IN2_0_6[1:0] = 0bin01 AND XOR_IN1_0_6[1:0] = 0bin10 => (XOR_OUT_0_6[1:0] = 0bin11 AND XOR_key_0_6 = 0bin0) OR (XOR_OUT_0_6[1:0] = 0bin00 AND XOR_key_0_6 = 0bin1));
ASSERT(XOR_IN1_0_6[1:0] = 0bin01 AND XOR_IN2_0_6[1:0] = 0bin11 => XOR_OUT_0_6[1:0] = 0bin10);
ASSERT(XOR_IN2_0_6[1:0] = 0bin01 AND XOR_IN1_0_6[1:0] = 0bin11 => XOR_OUT_0_6[1:0] = 0bin10);
ASSERT(XOR_IN1_0_6[1:0] = 0bin10 AND XOR_IN2_0_6[1:0] = 0bin10 => (XOR_OUT_0_6[1:0] = 0bin10 AND XOR_key_0_6 = 0bin0) OR (XOR_OUT_0_6[1:0] = 0bin00 AND XOR_key_0_6 = 0bin1));
ASSERT(XOR_IN1_0_6[1:0] = 0bin10 AND XOR_IN2_0_6[1:0] = 0bin11 => (XOR_OUT_0_6[1:0] = 0bin11 AND XOR_key_0_6 = 0bin0) OR (XOR_OUT_0_6[1:0] = 0bin01 AND XOR_key_0_6 = 0bin1) OR (XOR_OUT_0_6[1:0] = 0bin00 AND XOR_key_0_6 = 0bin1));
ASSERT(XOR_IN2_0_6[1:0] = 0bin10 AND XOR_IN1_0_6[1:0] = 0bin11 => (XOR_OUT_0_6[1:0] = 0bin11 AND XOR_key_0_6 = 0bin0) OR (XOR_OUT_0_6[1:0] = 0bin01 AND XOR_key_0_6 = 0bin1) OR (XOR_OUT_0_6[1:0] = 0bin00 AND XOR_key_0_6 = 0bin1));
ASSERT(XOR_IN1_0_6[1:0] = 0bin11 AND XOR_IN2_0_6[1:0] = 0bin11 => (XOR_OUT_0_6[1:0] = 0bin10 AND XOR_key_0_6 = 0bin0) OR (XOR_OUT_0_6[1:0] = 0bin00 AND XOR_key_0_6 = 0bin1));
x_0_8 : BITVECTOR(6);
y_0_8 : BITVECTOR(6);
x_1_8 : BITVECTOR(6);
y_1_8 : BITVECTOR(6);
x_2_8 : BITVECTOR(6);
y_2_8 : BITVECTOR(6);
x_3_8 : BITVECTOR(6);
y_3_8 : BITVECTOR(6);
ROUNDFUNC_IN_0_7 : BITVECTOR(6);
ROUNDFUNC_OUT_0_7 : BITVECTOR(6);
period_0_7 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_7 = 0bin000000 THEN ROUNDFUNC_OUT_0_7 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_7 = 0bin010000 THEN ROUNDFUNC_OUT_0_7 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_7 = 0bin000100 OR ROUNDFUNC_IN_0_7 = 0bin001000 OR ROUNDFUNC_IN_0_7 = 0bin001100 THEN ROUNDFUNC_OUT_0_7 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_7 = 0bin000001 OR ROUNDFUNC_IN_0_7 = 0bin000010 OR ROUNDFUNC_IN_0_7 = 0bin000011 THEN ROUNDFUNC_OUT_0_7 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_7 = 0bin000101 OR ROUNDFUNC_IN_0_7 = 0bin000110 OR ROUNDFUNC_IN_0_7 = 0bin000111 THEN (ROUNDFUNC_OUT_0_7 = 0bin010000 AND period_0_7 = 0bin1) OR (ROUNDFUNC_OUT_0_7 = 0bin100000 AND period_0_7 = 0bin0) ELSE ROUNDFUNC_OUT_0_7 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_7 : BITVECTOR(6);
COPY_OUT1_0_7 : BITVECTOR(6);
COPY_OUT2_0_7 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_7 = COPY_IN_0_7);
ASSERT(COPY_OUT2_0_7 = COPY_IN_0_7);
XOR_IN1_0_7 : BITVECTOR(6);
XOR_IN2_0_7 : BITVECTOR(6);
XOR_OUT_0_7 : BITVECTOR(6);
XOR_key_0_7 : BITVECTOR(1);
ASSERT(XOR_OUT_0_7[5:5] = XOR_IN1_0_7[5:5] | XOR_IN2_0_7[5:5]);
ASSERT(XOR_OUT_0_7[4:4] = XOR_IN1_0_7[4:4] | XOR_IN2_0_7[4:4]);
ASSERT(XOR_OUT_0_7[3:3] = XOR_IN1_0_7[3:3] | XOR_IN2_0_7[3:3]);
ASSERT(XOR_OUT_0_7[2:2] = BVXOR(XOR_IN1_0_7[2:2] , XOR_IN2_0_7[2:2]));
ASSERT(XOR_IN1_0_7[1:0] = 0bin00 AND XOR_IN2_0_7[1:0] = 0bin00 => XOR_OUT_0_7[1:0] = 0bin00);
ASSERT(XOR_IN1_0_7[1:0] = 0bin00 AND XOR_IN2_0_7[1:0] = 0bin01 => XOR_OUT_0_7[1:0] = 0bin01);
ASSERT(XOR_IN2_0_7[1:0] = 0bin00 AND XOR_IN1_0_7[1:0] = 0bin01 => XOR_OUT_0_7[1:0] = 0bin01);
ASSERT(XOR_IN1_0_7[1:0] = 0bin00 AND XOR_IN2_0_7[1:0] = 0bin10 => XOR_OUT_0_7[1:0] = 0bin10);
ASSERT(XOR_IN2_0_7[1:0] = 0bin00 AND XOR_IN1_0_7[1:0] = 0bin10 => XOR_OUT_0_7[1:0] = 0bin10);
ASSERT(XOR_IN1_0_7[1:0] = 0bin00 AND XOR_IN2_0_7[1:0] = 0bin11 => XOR_OUT_0_7[1:0] = 0bin11);
ASSERT(XOR_IN2_0_7[1:0] = 0bin00 AND XOR_IN1_0_7[1:0] = 0bin11 => XOR_OUT_0_7[1:0] = 0bin11);
ASSERT(XOR_IN1_0_7[1:0] = 0bin01 AND XOR_IN2_0_7[1:0] = 0bin01 => XOR_OUT_0_7[1:0] = 0bin00);
ASSERT(XOR_IN1_0_7[1:0] = 0bin01 AND XOR_IN2_0_7[1:0] = 0bin10 => (XOR_OUT_0_7[1:0] = 0bin11 AND XOR_key_0_7 = 0bin0) OR (XOR_OUT_0_7[1:0] = 0bin00 AND XOR_key_0_7 = 0bin1));
ASSERT(XOR_IN2_0_7[1:0] = 0bin01 AND XOR_IN1_0_7[1:0] = 0bin10 => (XOR_OUT_0_7[1:0] = 0bin11 AND XOR_key_0_7 = 0bin0) OR (XOR_OUT_0_7[1:0] = 0bin00 AND XOR_key_0_7 = 0bin1));
ASSERT(XOR_IN1_0_7[1:0] = 0bin01 AND XOR_IN2_0_7[1:0] = 0bin11 => XOR_OUT_0_7[1:0] = 0bin10);
ASSERT(XOR_IN2_0_7[1:0] = 0bin01 AND XOR_IN1_0_7[1:0] = 0bin11 => XOR_OUT_0_7[1:0] = 0bin10);
ASSERT(XOR_IN1_0_7[1:0] = 0bin10 AND XOR_IN2_0_7[1:0] = 0bin10 => (XOR_OUT_0_7[1:0] = 0bin10 AND XOR_key_0_7 = 0bin0) OR (XOR_OUT_0_7[1:0] = 0bin00 AND XOR_key_0_7 = 0bin1));
ASSERT(XOR_IN1_0_7[1:0] = 0bin10 AND XOR_IN2_0_7[1:0] = 0bin11 => (XOR_OUT_0_7[1:0] = 0bin11 AND XOR_key_0_7 = 0bin0) OR (XOR_OUT_0_7[1:0] = 0bin01 AND XOR_key_0_7 = 0bin1) OR (XOR_OUT_0_7[1:0] = 0bin00 AND XOR_key_0_7 = 0bin1));
ASSERT(XOR_IN2_0_7[1:0] = 0bin10 AND XOR_IN1_0_7[1:0] = 0bin11 => (XOR_OUT_0_7[1:0] = 0bin11 AND XOR_key_0_7 = 0bin0) OR (XOR_OUT_0_7[1:0] = 0bin01 AND XOR_key_0_7 = 0bin1) OR (XOR_OUT_0_7[1:0] = 0bin00 AND XOR_key_0_7 = 0bin1));
ASSERT(XOR_IN1_0_7[1:0] = 0bin11 AND XOR_IN2_0_7[1:0] = 0bin11 => (XOR_OUT_0_7[1:0] = 0bin10 AND XOR_key_0_7 = 0bin0) OR (XOR_OUT_0_7[1:0] = 0bin00 AND XOR_key_0_7 = 0bin1));
x_0_9 : BITVECTOR(6);
y_0_9 : BITVECTOR(6);
x_1_9 : BITVECTOR(6);
y_1_9 : BITVECTOR(6);
x_2_9 : BITVECTOR(6);
y_2_9 : BITVECTOR(6);
x_3_9 : BITVECTOR(6);
y_3_9 : BITVECTOR(6);
ROUNDFUNC_IN_0_8 : BITVECTOR(6);
ROUNDFUNC_OUT_0_8 : BITVECTOR(6);
period_0_8 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_8 = 0bin000000 THEN ROUNDFUNC_OUT_0_8 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_8 = 0bin010000 THEN ROUNDFUNC_OUT_0_8 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_8 = 0bin000100 OR ROUNDFUNC_IN_0_8 = 0bin001000 OR ROUNDFUNC_IN_0_8 = 0bin001100 THEN ROUNDFUNC_OUT_0_8 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_8 = 0bin000001 OR ROUNDFUNC_IN_0_8 = 0bin000010 OR ROUNDFUNC_IN_0_8 = 0bin000011 THEN ROUNDFUNC_OUT_0_8 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_8 = 0bin000101 OR ROUNDFUNC_IN_0_8 = 0bin000110 OR ROUNDFUNC_IN_0_8 = 0bin000111 THEN (ROUNDFUNC_OUT_0_8 = 0bin010000 AND period_0_8 = 0bin1) OR (ROUNDFUNC_OUT_0_8 = 0bin100000 AND period_0_8 = 0bin0) ELSE ROUNDFUNC_OUT_0_8 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_8 : BITVECTOR(6);
COPY_OUT1_0_8 : BITVECTOR(6);
COPY_OUT2_0_8 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_8 = COPY_IN_0_8);
ASSERT(COPY_OUT2_0_8 = COPY_IN_0_8);
XOR_IN1_0_8 : BITVECTOR(6);
XOR_IN2_0_8 : BITVECTOR(6);
XOR_OUT_0_8 : BITVECTOR(6);
XOR_key_0_8 : BITVECTOR(1);
ASSERT(XOR_OUT_0_8[5:5] = XOR_IN1_0_8[5:5] | XOR_IN2_0_8[5:5]);
ASSERT(XOR_OUT_0_8[4:4] = XOR_IN1_0_8[4:4] | XOR_IN2_0_8[4:4]);
ASSERT(XOR_OUT_0_8[3:3] = XOR_IN1_0_8[3:3] | XOR_IN2_0_8[3:3]);
ASSERT(XOR_OUT_0_8[2:2] = BVXOR(XOR_IN1_0_8[2:2] , XOR_IN2_0_8[2:2]));
ASSERT(XOR_IN1_0_8[1:0] = 0bin00 AND XOR_IN2_0_8[1:0] = 0bin00 => XOR_OUT_0_8[1:0] = 0bin00);
ASSERT(XOR_IN1_0_8[1:0] = 0bin00 AND XOR_IN2_0_8[1:0] = 0bin01 => XOR_OUT_0_8[1:0] = 0bin01);
ASSERT(XOR_IN2_0_8[1:0] = 0bin00 AND XOR_IN1_0_8[1:0] = 0bin01 => XOR_OUT_0_8[1:0] = 0bin01);
ASSERT(XOR_IN1_0_8[1:0] = 0bin00 AND XOR_IN2_0_8[1:0] = 0bin10 => XOR_OUT_0_8[1:0] = 0bin10);
ASSERT(XOR_IN2_0_8[1:0] = 0bin00 AND XOR_IN1_0_8[1:0] = 0bin10 => XOR_OUT_0_8[1:0] = 0bin10);
ASSERT(XOR_IN1_0_8[1:0] = 0bin00 AND XOR_IN2_0_8[1:0] = 0bin11 => XOR_OUT_0_8[1:0] = 0bin11);
ASSERT(XOR_IN2_0_8[1:0] = 0bin00 AND XOR_IN1_0_8[1:0] = 0bin11 => XOR_OUT_0_8[1:0] = 0bin11);
ASSERT(XOR_IN1_0_8[1:0] = 0bin01 AND XOR_IN2_0_8[1:0] = 0bin01 => XOR_OUT_0_8[1:0] = 0bin00);
ASSERT(XOR_IN1_0_8[1:0] = 0bin01 AND XOR_IN2_0_8[1:0] = 0bin10 => (XOR_OUT_0_8[1:0] = 0bin11 AND XOR_key_0_8 = 0bin0) OR (XOR_OUT_0_8[1:0] = 0bin00 AND XOR_key_0_8 = 0bin1));
ASSERT(XOR_IN2_0_8[1:0] = 0bin01 AND XOR_IN1_0_8[1:0] = 0bin10 => (XOR_OUT_0_8[1:0] = 0bin11 AND XOR_key_0_8 = 0bin0) OR (XOR_OUT_0_8[1:0] = 0bin00 AND XOR_key_0_8 = 0bin1));
ASSERT(XOR_IN1_0_8[1:0] = 0bin01 AND XOR_IN2_0_8[1:0] = 0bin11 => XOR_OUT_0_8[1:0] = 0bin10);
ASSERT(XOR_IN2_0_8[1:0] = 0bin01 AND XOR_IN1_0_8[1:0] = 0bin11 => XOR_OUT_0_8[1:0] = 0bin10);
ASSERT(XOR_IN1_0_8[1:0] = 0bin10 AND XOR_IN2_0_8[1:0] = 0bin10 => (XOR_OUT_0_8[1:0] = 0bin10 AND XOR_key_0_8 = 0bin0) OR (XOR_OUT_0_8[1:0] = 0bin00 AND XOR_key_0_8 = 0bin1));
ASSERT(XOR_IN1_0_8[1:0] = 0bin10 AND XOR_IN2_0_8[1:0] = 0bin11 => (XOR_OUT_0_8[1:0] = 0bin11 AND XOR_key_0_8 = 0bin0) OR (XOR_OUT_0_8[1:0] = 0bin01 AND XOR_key_0_8 = 0bin1) OR (XOR_OUT_0_8[1:0] = 0bin00 AND XOR_key_0_8 = 0bin1));
ASSERT(XOR_IN2_0_8[1:0] = 0bin10 AND XOR_IN1_0_8[1:0] = 0bin11 => (XOR_OUT_0_8[1:0] = 0bin11 AND XOR_key_0_8 = 0bin0) OR (XOR_OUT_0_8[1:0] = 0bin01 AND XOR_key_0_8 = 0bin1) OR (XOR_OUT_0_8[1:0] = 0bin00 AND XOR_key_0_8 = 0bin1));
ASSERT(XOR_IN1_0_8[1:0] = 0bin11 AND XOR_IN2_0_8[1:0] = 0bin11 => (XOR_OUT_0_8[1:0] = 0bin10 AND XOR_key_0_8 = 0bin0) OR (XOR_OUT_0_8[1:0] = 0bin00 AND XOR_key_0_8 = 0bin1));
x_0_10 : BITVECTOR(6);
y_0_10 : BITVECTOR(6);
x_1_10 : BITVECTOR(6);
y_1_10 : BITVECTOR(6);
x_2_10 : BITVECTOR(6);
y_2_10 : BITVECTOR(6);
x_3_10 : BITVECTOR(6);
y_3_10 : BITVECTOR(6);
ROUNDFUNC_IN_0_9 : BITVECTOR(6);
ROUNDFUNC_OUT_0_9 : BITVECTOR(6);
period_0_9 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_9 = 0bin000000 THEN ROUNDFUNC_OUT_0_9 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_9 = 0bin010000 THEN ROUNDFUNC_OUT_0_9 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_9 = 0bin000100 OR ROUNDFUNC_IN_0_9 = 0bin001000 OR ROUNDFUNC_IN_0_9 = 0bin001100 THEN ROUNDFUNC_OUT_0_9 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_9 = 0bin000001 OR ROUNDFUNC_IN_0_9 = 0bin000010 OR ROUNDFUNC_IN_0_9 = 0bin000011 THEN ROUNDFUNC_OUT_0_9 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_9 = 0bin000101 OR ROUNDFUNC_IN_0_9 = 0bin000110 OR ROUNDFUNC_IN_0_9 = 0bin000111 THEN (ROUNDFUNC_OUT_0_9 = 0bin010000 AND period_0_9 = 0bin1) OR (ROUNDFUNC_OUT_0_9 = 0bin100000 AND period_0_9 = 0bin0) ELSE ROUNDFUNC_OUT_0_9 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_9 : BITVECTOR(6);
COPY_OUT1_0_9 : BITVECTOR(6);
COPY_OUT2_0_9 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_9 = COPY_IN_0_9);
ASSERT(COPY_OUT2_0_9 = COPY_IN_0_9);
XOR_IN1_0_9 : BITVECTOR(6);
XOR_IN2_0_9 : BITVECTOR(6);
XOR_OUT_0_9 : BITVECTOR(6);
XOR_key_0_9 : BITVECTOR(1);
ASSERT(XOR_OUT_0_9[5:5] = XOR_IN1_0_9[5:5] | XOR_IN2_0_9[5:5]);
ASSERT(XOR_OUT_0_9[4:4] = XOR_IN1_0_9[4:4] | XOR_IN2_0_9[4:4]);
ASSERT(XOR_OUT_0_9[3:3] = XOR_IN1_0_9[3:3] | XOR_IN2_0_9[3:3]);
ASSERT(XOR_OUT_0_9[2:2] = BVXOR(XOR_IN1_0_9[2:2] , XOR_IN2_0_9[2:2]));
ASSERT(XOR_IN1_0_9[1:0] = 0bin00 AND XOR_IN2_0_9[1:0] = 0bin00 => XOR_OUT_0_9[1:0] = 0bin00);
ASSERT(XOR_IN1_0_9[1:0] = 0bin00 AND XOR_IN2_0_9[1:0] = 0bin01 => XOR_OUT_0_9[1:0] = 0bin01);
ASSERT(XOR_IN2_0_9[1:0] = 0bin00 AND XOR_IN1_0_9[1:0] = 0bin01 => XOR_OUT_0_9[1:0] = 0bin01);
ASSERT(XOR_IN1_0_9[1:0] = 0bin00 AND XOR_IN2_0_9[1:0] = 0bin10 => XOR_OUT_0_9[1:0] = 0bin10);
ASSERT(XOR_IN2_0_9[1:0] = 0bin00 AND XOR_IN1_0_9[1:0] = 0bin10 => XOR_OUT_0_9[1:0] = 0bin10);
ASSERT(XOR_IN1_0_9[1:0] = 0bin00 AND XOR_IN2_0_9[1:0] = 0bin11 => XOR_OUT_0_9[1:0] = 0bin11);
ASSERT(XOR_IN2_0_9[1:0] = 0bin00 AND XOR_IN1_0_9[1:0] = 0bin11 => XOR_OUT_0_9[1:0] = 0bin11);
ASSERT(XOR_IN1_0_9[1:0] = 0bin01 AND XOR_IN2_0_9[1:0] = 0bin01 => XOR_OUT_0_9[1:0] = 0bin00);
ASSERT(XOR_IN1_0_9[1:0] = 0bin01 AND XOR_IN2_0_9[1:0] = 0bin10 => (XOR_OUT_0_9[1:0] = 0bin11 AND XOR_key_0_9 = 0bin0) OR (XOR_OUT_0_9[1:0] = 0bin00 AND XOR_key_0_9 = 0bin1));
ASSERT(XOR_IN2_0_9[1:0] = 0bin01 AND XOR_IN1_0_9[1:0] = 0bin10 => (XOR_OUT_0_9[1:0] = 0bin11 AND XOR_key_0_9 = 0bin0) OR (XOR_OUT_0_9[1:0] = 0bin00 AND XOR_key_0_9 = 0bin1));
ASSERT(XOR_IN1_0_9[1:0] = 0bin01 AND XOR_IN2_0_9[1:0] = 0bin11 => XOR_OUT_0_9[1:0] = 0bin10);
ASSERT(XOR_IN2_0_9[1:0] = 0bin01 AND XOR_IN1_0_9[1:0] = 0bin11 => XOR_OUT_0_9[1:0] = 0bin10);
ASSERT(XOR_IN1_0_9[1:0] = 0bin10 AND XOR_IN2_0_9[1:0] = 0bin10 => (XOR_OUT_0_9[1:0] = 0bin10 AND XOR_key_0_9 = 0bin0) OR (XOR_OUT_0_9[1:0] = 0bin00 AND XOR_key_0_9 = 0bin1));
ASSERT(XOR_IN1_0_9[1:0] = 0bin10 AND XOR_IN2_0_9[1:0] = 0bin11 => (XOR_OUT_0_9[1:0] = 0bin11 AND XOR_key_0_9 = 0bin0) OR (XOR_OUT_0_9[1:0] = 0bin01 AND XOR_key_0_9 = 0bin1) OR (XOR_OUT_0_9[1:0] = 0bin00 AND XOR_key_0_9 = 0bin1));
ASSERT(XOR_IN2_0_9[1:0] = 0bin10 AND XOR_IN1_0_9[1:0] = 0bin11 => (XOR_OUT_0_9[1:0] = 0bin11 AND XOR_key_0_9 = 0bin0) OR (XOR_OUT_0_9[1:0] = 0bin01 AND XOR_key_0_9 = 0bin1) OR (XOR_OUT_0_9[1:0] = 0bin00 AND XOR_key_0_9 = 0bin1));
ASSERT(XOR_IN1_0_9[1:0] = 0bin11 AND XOR_IN2_0_9[1:0] = 0bin11 => (XOR_OUT_0_9[1:0] = 0bin10 AND XOR_key_0_9 = 0bin0) OR (XOR_OUT_0_9[1:0] = 0bin00 AND XOR_key_0_9 = 0bin1));
x_0_11 : BITVECTOR(6);
y_0_11 : BITVECTOR(6);
x_1_11 : BITVECTOR(6);
y_1_11 : BITVECTOR(6);
x_2_11 : BITVECTOR(6);
y_2_11 : BITVECTOR(6);
x_3_11 : BITVECTOR(6);
y_3_11 : BITVECTOR(6);
ROUNDFUNC_IN_0_10 : BITVECTOR(6);
ROUNDFUNC_OUT_0_10 : BITVECTOR(6);
period_0_10 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_10 = 0bin000000 THEN ROUNDFUNC_OUT_0_10 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_10 = 0bin010000 THEN ROUNDFUNC_OUT_0_10 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_10 = 0bin000100 OR ROUNDFUNC_IN_0_10 = 0bin001000 OR ROUNDFUNC_IN_0_10 = 0bin001100 THEN ROUNDFUNC_OUT_0_10 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_10 = 0bin000001 OR ROUNDFUNC_IN_0_10 = 0bin000010 OR ROUNDFUNC_IN_0_10 = 0bin000011 THEN ROUNDFUNC_OUT_0_10 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_10 = 0bin000101 OR ROUNDFUNC_IN_0_10 = 0bin000110 OR ROUNDFUNC_IN_0_10 = 0bin000111 THEN (ROUNDFUNC_OUT_0_10 = 0bin010000 AND period_0_10 = 0bin1) OR (ROUNDFUNC_OUT_0_10 = 0bin100000 AND period_0_10 = 0bin0) ELSE ROUNDFUNC_OUT_0_10 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_10 : BITVECTOR(6);
COPY_OUT1_0_10 : BITVECTOR(6);
COPY_OUT2_0_10 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_10 = COPY_IN_0_10);
ASSERT(COPY_OUT2_0_10 = COPY_IN_0_10);
XOR_IN1_0_10 : BITVECTOR(6);
XOR_IN2_0_10 : BITVECTOR(6);
XOR_OUT_0_10 : BITVECTOR(6);
XOR_key_0_10 : BITVECTOR(1);
ASSERT(XOR_OUT_0_10[5:5] = XOR_IN1_0_10[5:5] | XOR_IN2_0_10[5:5]);
ASSERT(XOR_OUT_0_10[4:4] = XOR_IN1_0_10[4:4] | XOR_IN2_0_10[4:4]);
ASSERT(XOR_OUT_0_10[3:3] = XOR_IN1_0_10[3:3] | XOR_IN2_0_10[3:3]);
ASSERT(XOR_OUT_0_10[2:2] = BVXOR(XOR_IN1_0_10[2:2] , XOR_IN2_0_10[2:2]));
ASSERT(XOR_IN1_0_10[1:0] = 0bin00 AND XOR_IN2_0_10[1:0] = 0bin00 => XOR_OUT_0_10[1:0] = 0bin00);
ASSERT(XOR_IN1_0_10[1:0] = 0bin00 AND XOR_IN2_0_10[1:0] = 0bin01 => XOR_OUT_0_10[1:0] = 0bin01);
ASSERT(XOR_IN2_0_10[1:0] = 0bin00 AND XOR_IN1_0_10[1:0] = 0bin01 => XOR_OUT_0_10[1:0] = 0bin01);
ASSERT(XOR_IN1_0_10[1:0] = 0bin00 AND XOR_IN2_0_10[1:0] = 0bin10 => XOR_OUT_0_10[1:0] = 0bin10);
ASSERT(XOR_IN2_0_10[1:0] = 0bin00 AND XOR_IN1_0_10[1:0] = 0bin10 => XOR_OUT_0_10[1:0] = 0bin10);
ASSERT(XOR_IN1_0_10[1:0] = 0bin00 AND XOR_IN2_0_10[1:0] = 0bin11 => XOR_OUT_0_10[1:0] = 0bin11);
ASSERT(XOR_IN2_0_10[1:0] = 0bin00 AND XOR_IN1_0_10[1:0] = 0bin11 => XOR_OUT_0_10[1:0] = 0bin11);
ASSERT(XOR_IN1_0_10[1:0] = 0bin01 AND XOR_IN2_0_10[1:0] = 0bin01 => XOR_OUT_0_10[1:0] = 0bin00);
ASSERT(XOR_IN1_0_10[1:0] = 0bin01 AND XOR_IN2_0_10[1:0] = 0bin10 => (XOR_OUT_0_10[1:0] = 0bin11 AND XOR_key_0_10 = 0bin0) OR (XOR_OUT_0_10[1:0] = 0bin00 AND XOR_key_0_10 = 0bin1));
ASSERT(XOR_IN2_0_10[1:0] = 0bin01 AND XOR_IN1_0_10[1:0] = 0bin10 => (XOR_OUT_0_10[1:0] = 0bin11 AND XOR_key_0_10 = 0bin0) OR (XOR_OUT_0_10[1:0] = 0bin00 AND XOR_key_0_10 = 0bin1));
ASSERT(XOR_IN1_0_10[1:0] = 0bin01 AND XOR_IN2_0_10[1:0] = 0bin11 => XOR_OUT_0_10[1:0] = 0bin10);
ASSERT(XOR_IN2_0_10[1:0] = 0bin01 AND XOR_IN1_0_10[1:0] = 0bin11 => XOR_OUT_0_10[1:0] = 0bin10);
ASSERT(XOR_IN1_0_10[1:0] = 0bin10 AND XOR_IN2_0_10[1:0] = 0bin10 => (XOR_OUT_0_10[1:0] = 0bin10 AND XOR_key_0_10 = 0bin0) OR (XOR_OUT_0_10[1:0] = 0bin00 AND XOR_key_0_10 = 0bin1));
ASSERT(XOR_IN1_0_10[1:0] = 0bin10 AND XOR_IN2_0_10[1:0] = 0bin11 => (XOR_OUT_0_10[1:0] = 0bin11 AND XOR_key_0_10 = 0bin0) OR (XOR_OUT_0_10[1:0] = 0bin01 AND XOR_key_0_10 = 0bin1) OR (XOR_OUT_0_10[1:0] = 0bin00 AND XOR_key_0_10 = 0bin1));
ASSERT(XOR_IN2_0_10[1:0] = 0bin10 AND XOR_IN1_0_10[1:0] = 0bin11 => (XOR_OUT_0_10[1:0] = 0bin11 AND XOR_key_0_10 = 0bin0) OR (XOR_OUT_0_10[1:0] = 0bin01 AND XOR_key_0_10 = 0bin1) OR (XOR_OUT_0_10[1:0] = 0bin00 AND XOR_key_0_10 = 0bin1));
ASSERT(XOR_IN1_0_10[1:0] = 0bin11 AND XOR_IN2_0_10[1:0] = 0bin11 => (XOR_OUT_0_10[1:0] = 0bin10 AND XOR_key_0_10 = 0bin0) OR (XOR_OUT_0_10[1:0] = 0bin00 AND XOR_key_0_10 = 0bin1));
x_0_12 : BITVECTOR(6);
y_0_12 : BITVECTOR(6);
x_1_12 : BITVECTOR(6);
y_1_12 : BITVECTOR(6);
x_2_12 : BITVECTOR(6);
y_2_12 : BITVECTOR(6);
x_3_12 : BITVECTOR(6);
y_3_12 : BITVECTOR(6);
ROUNDFUNC_IN_0_11 : BITVECTOR(6);
ROUNDFUNC_OUT_0_11 : BITVECTOR(6);
period_0_11 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_11 = 0bin000000 THEN ROUNDFUNC_OUT_0_11 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_11 = 0bin010000 THEN ROUNDFUNC_OUT_0_11 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_11 = 0bin000100 OR ROUNDFUNC_IN_0_11 = 0bin001000 OR ROUNDFUNC_IN_0_11 = 0bin001100 THEN ROUNDFUNC_OUT_0_11 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_11 = 0bin000001 OR ROUNDFUNC_IN_0_11 = 0bin000010 OR ROUNDFUNC_IN_0_11 = 0bin000011 THEN ROUNDFUNC_OUT_0_11 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_11 = 0bin000101 OR ROUNDFUNC_IN_0_11 = 0bin000110 OR ROUNDFUNC_IN_0_11 = 0bin000111 THEN (ROUNDFUNC_OUT_0_11 = 0bin010000 AND period_0_11 = 0bin1) OR (ROUNDFUNC_OUT_0_11 = 0bin100000 AND period_0_11 = 0bin0) ELSE ROUNDFUNC_OUT_0_11 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_11 : BITVECTOR(6);
COPY_OUT1_0_11 : BITVECTOR(6);
COPY_OUT2_0_11 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_11 = COPY_IN_0_11);
ASSERT(COPY_OUT2_0_11 = COPY_IN_0_11);
XOR_IN1_0_11 : BITVECTOR(6);
XOR_IN2_0_11 : BITVECTOR(6);
XOR_OUT_0_11 : BITVECTOR(6);
XOR_key_0_11 : BITVECTOR(1);
ASSERT(XOR_OUT_0_11[5:5] = XOR_IN1_0_11[5:5] | XOR_IN2_0_11[5:5]);
ASSERT(XOR_OUT_0_11[4:4] = XOR_IN1_0_11[4:4] | XOR_IN2_0_11[4:4]);
ASSERT(XOR_OUT_0_11[3:3] = XOR_IN1_0_11[3:3] | XOR_IN2_0_11[3:3]);
ASSERT(XOR_OUT_0_11[2:2] = BVXOR(XOR_IN1_0_11[2:2] , XOR_IN2_0_11[2:2]));
ASSERT(XOR_IN1_0_11[1:0] = 0bin00 AND XOR_IN2_0_11[1:0] = 0bin00 => XOR_OUT_0_11[1:0] = 0bin00);
ASSERT(XOR_IN1_0_11[1:0] = 0bin00 AND XOR_IN2_0_11[1:0] = 0bin01 => XOR_OUT_0_11[1:0] = 0bin01);
ASSERT(XOR_IN2_0_11[1:0] = 0bin00 AND XOR_IN1_0_11[1:0] = 0bin01 => XOR_OUT_0_11[1:0] = 0bin01);
ASSERT(XOR_IN1_0_11[1:0] = 0bin00 AND XOR_IN2_0_11[1:0] = 0bin10 => XOR_OUT_0_11[1:0] = 0bin10);
ASSERT(XOR_IN2_0_11[1:0] = 0bin00 AND XOR_IN1_0_11[1:0] = 0bin10 => XOR_OUT_0_11[1:0] = 0bin10);
ASSERT(XOR_IN1_0_11[1:0] = 0bin00 AND XOR_IN2_0_11[1:0] = 0bin11 => XOR_OUT_0_11[1:0] = 0bin11);
ASSERT(XOR_IN2_0_11[1:0] = 0bin00 AND XOR_IN1_0_11[1:0] = 0bin11 => XOR_OUT_0_11[1:0] = 0bin11);
ASSERT(XOR_IN1_0_11[1:0] = 0bin01 AND XOR_IN2_0_11[1:0] = 0bin01 => XOR_OUT_0_11[1:0] = 0bin00);
ASSERT(XOR_IN1_0_11[1:0] = 0bin01 AND XOR_IN2_0_11[1:0] = 0bin10 => (XOR_OUT_0_11[1:0] = 0bin11 AND XOR_key_0_11 = 0bin0) OR (XOR_OUT_0_11[1:0] = 0bin00 AND XOR_key_0_11 = 0bin1));
ASSERT(XOR_IN2_0_11[1:0] = 0bin01 AND XOR_IN1_0_11[1:0] = 0bin10 => (XOR_OUT_0_11[1:0] = 0bin11 AND XOR_key_0_11 = 0bin0) OR (XOR_OUT_0_11[1:0] = 0bin00 AND XOR_key_0_11 = 0bin1));
ASSERT(XOR_IN1_0_11[1:0] = 0bin01 AND XOR_IN2_0_11[1:0] = 0bin11 => XOR_OUT_0_11[1:0] = 0bin10);
ASSERT(XOR_IN2_0_11[1:0] = 0bin01 AND XOR_IN1_0_11[1:0] = 0bin11 => XOR_OUT_0_11[1:0] = 0bin10);
ASSERT(XOR_IN1_0_11[1:0] = 0bin10 AND XOR_IN2_0_11[1:0] = 0bin10 => (XOR_OUT_0_11[1:0] = 0bin10 AND XOR_key_0_11 = 0bin0) OR (XOR_OUT_0_11[1:0] = 0bin00 AND XOR_key_0_11 = 0bin1));
ASSERT(XOR_IN1_0_11[1:0] = 0bin10 AND XOR_IN2_0_11[1:0] = 0bin11 => (XOR_OUT_0_11[1:0] = 0bin11 AND XOR_key_0_11 = 0bin0) OR (XOR_OUT_0_11[1:0] = 0bin01 AND XOR_key_0_11 = 0bin1) OR (XOR_OUT_0_11[1:0] = 0bin00 AND XOR_key_0_11 = 0bin1));
ASSERT(XOR_IN2_0_11[1:0] = 0bin10 AND XOR_IN1_0_11[1:0] = 0bin11 => (XOR_OUT_0_11[1:0] = 0bin11 AND XOR_key_0_11 = 0bin0) OR (XOR_OUT_0_11[1:0] = 0bin01 AND XOR_key_0_11 = 0bin1) OR (XOR_OUT_0_11[1:0] = 0bin00 AND XOR_key_0_11 = 0bin1));
ASSERT(XOR_IN1_0_11[1:0] = 0bin11 AND XOR_IN2_0_11[1:0] = 0bin11 => (XOR_OUT_0_11[1:0] = 0bin10 AND XOR_key_0_11 = 0bin0) OR (XOR_OUT_0_11[1:0] = 0bin00 AND XOR_key_0_11 = 0bin1));
x_0_13 : BITVECTOR(6);
y_0_13 : BITVECTOR(6);
x_1_13 : BITVECTOR(6);
y_1_13 : BITVECTOR(6);
x_2_13 : BITVECTOR(6);
y_2_13 : BITVECTOR(6);
x_3_13 : BITVECTOR(6);
y_3_13 : BITVECTOR(6);
ROUNDFUNC_IN_0_12 : BITVECTOR(6);
ROUNDFUNC_OUT_0_12 : BITVECTOR(6);
period_0_12 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_12 = 0bin000000 THEN ROUNDFUNC_OUT_0_12 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_12 = 0bin010000 THEN ROUNDFUNC_OUT_0_12 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_12 = 0bin000100 OR ROUNDFUNC_IN_0_12 = 0bin001000 OR ROUNDFUNC_IN_0_12 = 0bin001100 THEN ROUNDFUNC_OUT_0_12 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_12 = 0bin000001 OR ROUNDFUNC_IN_0_12 = 0bin000010 OR ROUNDFUNC_IN_0_12 = 0bin000011 THEN ROUNDFUNC_OUT_0_12 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_12 = 0bin000101 OR ROUNDFUNC_IN_0_12 = 0bin000110 OR ROUNDFUNC_IN_0_12 = 0bin000111 THEN (ROUNDFUNC_OUT_0_12 = 0bin010000 AND period_0_12 = 0bin1) OR (ROUNDFUNC_OUT_0_12 = 0bin100000 AND period_0_12 = 0bin0) ELSE ROUNDFUNC_OUT_0_12 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_12 : BITVECTOR(6);
COPY_OUT1_0_12 : BITVECTOR(6);
COPY_OUT2_0_12 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_12 = COPY_IN_0_12);
ASSERT(COPY_OUT2_0_12 = COPY_IN_0_12);
XOR_IN1_0_12 : BITVECTOR(6);
XOR_IN2_0_12 : BITVECTOR(6);
XOR_OUT_0_12 : BITVECTOR(6);
XOR_key_0_12 : BITVECTOR(1);
ASSERT(XOR_OUT_0_12[5:5] = XOR_IN1_0_12[5:5] | XOR_IN2_0_12[5:5]);
ASSERT(XOR_OUT_0_12[4:4] = XOR_IN1_0_12[4:4] | XOR_IN2_0_12[4:4]);
ASSERT(XOR_OUT_0_12[3:3] = XOR_IN1_0_12[3:3] | XOR_IN2_0_12[3:3]);
ASSERT(XOR_OUT_0_12[2:2] = BVXOR(XOR_IN1_0_12[2:2] , XOR_IN2_0_12[2:2]));
ASSERT(XOR_IN1_0_12[1:0] = 0bin00 AND XOR_IN2_0_12[1:0] = 0bin00 => XOR_OUT_0_12[1:0] = 0bin00);
ASSERT(XOR_IN1_0_12[1:0] = 0bin00 AND XOR_IN2_0_12[1:0] = 0bin01 => XOR_OUT_0_12[1:0] = 0bin01);
ASSERT(XOR_IN2_0_12[1:0] = 0bin00 AND XOR_IN1_0_12[1:0] = 0bin01 => XOR_OUT_0_12[1:0] = 0bin01);
ASSERT(XOR_IN1_0_12[1:0] = 0bin00 AND XOR_IN2_0_12[1:0] = 0bin10 => XOR_OUT_0_12[1:0] = 0bin10);
ASSERT(XOR_IN2_0_12[1:0] = 0bin00 AND XOR_IN1_0_12[1:0] = 0bin10 => XOR_OUT_0_12[1:0] = 0bin10);
ASSERT(XOR_IN1_0_12[1:0] = 0bin00 AND XOR_IN2_0_12[1:0] = 0bin11 => XOR_OUT_0_12[1:0] = 0bin11);
ASSERT(XOR_IN2_0_12[1:0] = 0bin00 AND XOR_IN1_0_12[1:0] = 0bin11 => XOR_OUT_0_12[1:0] = 0bin11);
ASSERT(XOR_IN1_0_12[1:0] = 0bin01 AND XOR_IN2_0_12[1:0] = 0bin01 => XOR_OUT_0_12[1:0] = 0bin00);
ASSERT(XOR_IN1_0_12[1:0] = 0bin01 AND XOR_IN2_0_12[1:0] = 0bin10 => (XOR_OUT_0_12[1:0] = 0bin11 AND XOR_key_0_12 = 0bin0) OR (XOR_OUT_0_12[1:0] = 0bin00 AND XOR_key_0_12 = 0bin1));
ASSERT(XOR_IN2_0_12[1:0] = 0bin01 AND XOR_IN1_0_12[1:0] = 0bin10 => (XOR_OUT_0_12[1:0] = 0bin11 AND XOR_key_0_12 = 0bin0) OR (XOR_OUT_0_12[1:0] = 0bin00 AND XOR_key_0_12 = 0bin1));
ASSERT(XOR_IN1_0_12[1:0] = 0bin01 AND XOR_IN2_0_12[1:0] = 0bin11 => XOR_OUT_0_12[1:0] = 0bin10);
ASSERT(XOR_IN2_0_12[1:0] = 0bin01 AND XOR_IN1_0_12[1:0] = 0bin11 => XOR_OUT_0_12[1:0] = 0bin10);
ASSERT(XOR_IN1_0_12[1:0] = 0bin10 AND XOR_IN2_0_12[1:0] = 0bin10 => (XOR_OUT_0_12[1:0] = 0bin10 AND XOR_key_0_12 = 0bin0) OR (XOR_OUT_0_12[1:0] = 0bin00 AND XOR_key_0_12 = 0bin1));
ASSERT(XOR_IN1_0_12[1:0] = 0bin10 AND XOR_IN2_0_12[1:0] = 0bin11 => (XOR_OUT_0_12[1:0] = 0bin11 AND XOR_key_0_12 = 0bin0) OR (XOR_OUT_0_12[1:0] = 0bin01 AND XOR_key_0_12 = 0bin1) OR (XOR_OUT_0_12[1:0] = 0bin00 AND XOR_key_0_12 = 0bin1));
ASSERT(XOR_IN2_0_12[1:0] = 0bin10 AND XOR_IN1_0_12[1:0] = 0bin11 => (XOR_OUT_0_12[1:0] = 0bin11 AND XOR_key_0_12 = 0bin0) OR (XOR_OUT_0_12[1:0] = 0bin01 AND XOR_key_0_12 = 0bin1) OR (XOR_OUT_0_12[1:0] = 0bin00 AND XOR_key_0_12 = 0bin1));
ASSERT(XOR_IN1_0_12[1:0] = 0bin11 AND XOR_IN2_0_12[1:0] = 0bin11 => (XOR_OUT_0_12[1:0] = 0bin10 AND XOR_key_0_12 = 0bin0) OR (XOR_OUT_0_12[1:0] = 0bin00 AND XOR_key_0_12 = 0bin1));
x_0_14 : BITVECTOR(6);
y_0_14 : BITVECTOR(6);
x_1_14 : BITVECTOR(6);
y_1_14 : BITVECTOR(6);
x_2_14 : BITVECTOR(6);
y_2_14 : BITVECTOR(6);
x_3_14 : BITVECTOR(6);
y_3_14 : BITVECTOR(6);
ROUNDFUNC_IN_0_13 : BITVECTOR(6);
ROUNDFUNC_OUT_0_13 : BITVECTOR(6);
period_0_13 : BITVECTOR(1);
ASSERT(IF ROUNDFUNC_IN_0_13 = 0bin000000 THEN ROUNDFUNC_OUT_0_13 = 0bin000000 ELSE (IF ROUNDFUNC_IN_0_13 = 0bin010000 THEN ROUNDFUNC_OUT_0_13 = 0bin010000 ELSE (IF ROUNDFUNC_IN_0_13 = 0bin000100 OR ROUNDFUNC_IN_0_13 = 0bin001000 OR ROUNDFUNC_IN_0_13 = 0bin001100 THEN ROUNDFUNC_OUT_0_13 = 0bin001000 ELSE (IF ROUNDFUNC_IN_0_13 = 0bin000001 OR ROUNDFUNC_IN_0_13 = 0bin000010 OR ROUNDFUNC_IN_0_13 = 0bin000011 THEN ROUNDFUNC_OUT_0_13 = 0bin000010 ELSE (IF ROUNDFUNC_IN_0_13 = 0bin000101 OR ROUNDFUNC_IN_0_13 = 0bin000110 OR ROUNDFUNC_IN_0_13 = 0bin000111 THEN (ROUNDFUNC_OUT_0_13 = 0bin010000 AND period_0_13 = 0bin1) OR (ROUNDFUNC_OUT_0_13 = 0bin100000 AND period_0_13 = 0bin0) ELSE ROUNDFUNC_OUT_0_13 = 0bin100000 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF);
COPY_IN_0_13 : BITVECTOR(6);
COPY_OUT1_0_13 : BITVECTOR(6);
COPY_OUT2_0_13 : BITVECTOR(6);
ASSERT(COPY_OUT1_0_13 = COPY_IN_0_13);
ASSERT(COPY_OUT2_0_13 = COPY_IN_0_13);
XOR_IN1_0_13 : BITVECTOR(6);
XOR_IN2_0_13 : BITVECTOR(6);
XOR_OUT_0_13 : BITVECTOR(6);
XOR_key_0_13 : BITVECTOR(1);
ASSERT(XOR_OUT_0_13[5:5] = XOR_IN1_0_13[5:5] | XOR_IN2_0_13[5:5]);
ASSERT(XOR_OUT_0_13[4:4] = XOR_IN1_0_13[4:4] | XOR_IN2_0_13[4:4]);
ASSERT(XOR_OUT_0_13[3:3] = XOR_IN1_0_13[3:3] | XOR_IN2_0_13[3:3]);
ASSERT(XOR_OUT_0_13[2:2] = BVXOR(XOR_IN1_0_13[2:2] , XOR_IN2_0_13[2:2]));
ASSERT(XOR_IN1_0_13[1:0] = 0bin00 AND XOR_IN2_0_13[1:0] = 0bin00 => XOR_OUT_0_13[1:0] = 0bin00);
ASSERT(XOR_IN1_0_13[1:0] = 0bin00 AND XOR_IN2_0_13[1:0] = 0bin01 => XOR_OUT_0_13[1:0] = 0bin01);
ASSERT(XOR_IN2_0_13[1:0] = 0bin00 AND XOR_IN1_0_13[1:0] = 0bin01 => XOR_OUT_0_13[1:0] = 0bin01);
ASSERT(XOR_IN1_0_13[1:0] = 0bin00 AND XOR_IN2_0_13[1:0] = 0bin10 => XOR_OUT_0_13[1:0] = 0bin10);
ASSERT(XOR_IN2_0_13[1:0] = 0bin00 AND XOR_IN1_0_13[1:0] = 0bin10 => XOR_OUT_0_13[1:0] = 0bin10);
ASSERT(XOR_IN1_0_13[1:0] = 0bin00 AND XOR_IN2_0_13[1:0] = 0bin11 => XOR_OUT_0_13[1:0] = 0bin11);
ASSERT(XOR_IN2_0_13[1:0] = 0bin00 AND XOR_IN1_0_13[1:0] = 0bin11 => XOR_OUT_0_13[1:0] = 0bin11);
ASSERT(XOR_IN1_0_13[1:0] = 0bin01 AND XOR_IN2_0_13[1:0] = 0bin01 => XOR_OUT_0_13[1:0] = 0bin00);
ASSERT(XOR_IN1_0_13[1:0] = 0bin01 AND XOR_IN2_0_13[1:0] = 0bin10 => (XOR_OUT_0_13[1:0] = 0bin11 AND XOR_key_0_13 = 0bin0) OR (XOR_OUT_0_13[1:0] = 0bin00 AND XOR_key_0_13 = 0bin1));
ASSERT(XOR_IN2_0_13[1:0] = 0bin01 AND XOR_IN1_0_13[1:0] = 0bin10 => (XOR_OUT_0_13[1:0] = 0bin11 AND XOR_key_0_13 = 0bin0) OR (XOR_OUT_0_13[1:0] = 0bin00 AND XOR_key_0_13 = 0bin1));
ASSERT(XOR_IN1_0_13[1:0] = 0bin01 AND XOR_IN2_0_13[1:0] = 0bin11 => XOR_OUT_0_13[1:0] = 0bin10);
ASSERT(XOR_IN2_0_13[1:0] = 0bin01 AND XOR_IN1_0_13[1:0] = 0bin11 => XOR_OUT_0_13[1:0] = 0bin10);
ASSERT(XOR_IN1_0_13[1:0] = 0bin10 AND XOR_IN2_0_13[1:0] = 0bin10 => (XOR_OUT_0_13[1:0] = 0bin10 AND XOR_key_0_13 = 0bin0) OR (XOR_OUT_0_13[1:0] = 0bin00 AND XOR_key_0_13 = 0bin1));
ASSERT(XOR_IN1_0_13[1:0] = 0bin10 AND XOR_IN2_0_13[1:0] = 0bin11 => (XOR_OUT_0_13[1:0] = 0bin11 AND XOR_key_0_13 = 0bin0) OR (XOR_OUT_0_13[1:0] = 0bin01 AND XOR_key_0_13 = 0bin1) OR (XOR_OUT_0_13[1:0] = 0bin00 AND XOR_key_0_13 = 0bin1));
ASSERT(XOR_IN2_0_13[1:0] = 0bin10 AND XOR_IN1_0_13[1:0] = 0bin11 => (XOR_OUT_0_13[1:0] = 0bin11 AND XOR_key_0_13 = 0bin0) OR (XOR_OUT_0_13[1:0] = 0bin01 AND XOR_key_0_13 = 0bin1) OR (XOR_OUT_0_13[1:0] = 0bin00 AND XOR_key_0_13 = 0bin1));
ASSERT(XOR_IN1_0_13[1:0] = 0bin11 AND XOR_IN2_0_13[1:0] = 0bin11 => (XOR_OUT_0_13[1:0] = 0bin10 AND XOR_key_0_13 = 0bin0) OR (XOR_OUT_0_13[1:0] = 0bin00 AND XOR_key_0_13 = 0bin1));
xlinear_0_14 : BITVECTOR(1);
ylinear_0_14 : BITVECTOR(1);
xlinear_1_14 : BITVECTOR(1);
ylinear_1_14 : BITVECTOR(1);
xlinear_2_14 : BITVECTOR(1);
ylinear_2_14 : BITVECTOR(1);
xlinear_3_14 : BITVECTOR(1);
ylinear_3_14 : BITVECTOR(1);
ASSERT((xlinear_0_14 = 0bin0) AND (xlinear_1_14 = 0bin0) AND (xlinear_2_14 = 0bin0) AND (xlinear_3_14 = 0bin0) => end = 0bin0);
ASSERT((ylinear_0_14 = 0bin0) AND (ylinear_1_14 = 0bin0) AND (ylinear_2_14 = 0bin0) AND (ylinear_3_14 = 0bin0) => end = 0bin0);
xlinear_0_15 : BITVECTOR(1);
ylinear_0_15 : BITVECTOR(1);
xlinear_1_15 : BITVECTOR(1);
ylinear_1_15 : BITVECTOR(1);
xlinear_2_15 : BITVECTOR(1);
ylinear_2_15 : BITVECTOR(1);
xlinear_3_15 : BITVECTOR(1);
ylinear_3_15 : BITVECTOR(1);
ASSERT((xlinear_0_15 = 0bin0) AND (xlinear_1_15 = 0bin0) AND (xlinear_2_15 = 0bin0) AND (xlinear_3_15 = 0bin0) => end = 0bin0);
ASSERT((ylinear_0_15 = 0bin0) AND (ylinear_1_15 = 0bin0) AND (ylinear_2_15 = 0bin0) AND (ylinear_3_15 = 0bin0) => end = 0bin0);
xlinearfirstmask_0_14 : BITVECTOR(1);
xlinearfirstmask_1_14 : BITVECTOR(1);
xlinearfirstmask_2_14 : BITVECTOR(1);
xlinearfirstmask_3_14 : BITVECTOR(1);
MASKSUM: BITVECTOR(6);
ASSERT(MASKSUM = 0bin000001);
ASSERT(MASKSUM = BVPLUS(6, 0bin00000@xlinearfirstmask_0_14, 0bin00000@xlinearfirstmask_1_14, 0bin00000@xlinearfirstmask_2_14, 0bin00000@xlinearfirstmask_3_14));
ASSERT((NOT(x_0_14 = 0bin000110) AND NOT(x_0_14 = 0bin000111) AND NOT(x_0_14[5:4] = 0bin01)) => xlinearfirstmask_0_14 = 0bin0);
ASSERT((NOT(x_1_14 = 0bin000110) AND NOT(x_1_14 = 0bin000111) AND NOT(x_1_14[5:4] = 0bin01)) => xlinearfirstmask_1_14 = 0bin0);
ASSERT((NOT(x_2_14 = 0bin000110) AND NOT(x_2_14 = 0bin000111) AND NOT(x_2_14[5:4] = 0bin01)) => xlinearfirstmask_2_14 = 0bin0);
ASSERT((NOT(x_3_14 = 0bin000110) AND NOT(x_3_14 = 0bin000111) AND NOT(x_3_14[5:4] = 0bin01)) => xlinearfirstmask_3_14 = 0bin0);
ASSERT(xlinearfirstmask_0_14 = 0bin1) => (xlinear_0_14[0:0] = 0bin1);
ASSERT(xlinearfirstmask_1_14 = 0bin1) => (xlinear_1_14[0:0] = 0bin1);
ASSERT(xlinearfirstmask_2_14 = 0bin1) => (xlinear_2_14[0:0] = 0bin1);
ASSERT(xlinearfirstmask_3_14 = 0bin1) => (xlinear_3_14[0:0] = 0bin1);
ROUNDFUNC_IN_0_14 : BITVECTOR(1);
ROUNDFUNC_OUT_0_14 : BITVECTOR(1);
ASSERT(ROUNDFUNC_OUT_0_14 = 0bin0);
COPY_IN_0_14 : BITVECTOR(1);
COPY_OUT1_0_14 : BITVECTOR(1);
COPY_OUT2_0_14 : BITVECTOR(1);
ASSERT((COPY_IN_0_14 = COPY_OUT1_0_14) AND (COPY_IN_0_14 = COPY_OUT2_0_14));
XOR_IN1_0_14 : BITVECTOR(1);
XOR_IN2_0_14 : BITVECTOR(1);
XOR_OUT_0_14 : BITVECTOR(1);
ASSERT(XOR_OUT_0_14[0:0] = (XOR_IN1_0_14[0:0] & XOR_IN2_0_14[0:0]));
ASSERT(x_0_0 = 0bin000000);
ASSERT(x_1_0 = 0bin000000);
ASSERT(x_2_0 = 0bin000001);
ASSERT(x_3_0 = 0bin000100);
ASSERT(x_0_0 = ROUNDFUNC_IN_0_0);
ASSERT(ROUNDFUNC_OUT_0_0 = COPY_IN_0_0);
ASSERT(COPY_OUT1_0_0 = y_0_0);
ASSERT(x_1_0 = XOR_IN1_0_0);
ASSERT(COPY_OUT2_0_0 = XOR_IN2_0_0);
ASSERT(y_1_0 = XOR_OUT_0_0);
ASSERT(x_2_0 = y_2_0);
ASSERT(x_3_0 = y_3_0);
ASSERT(x_0_1 = y_1_0);
ASSERT(x_1_1 = y_2_0);
ASSERT(x_2_1 = y_3_0);
ASSERT(x_3_1 = y_0_0);
ASSERT(x_0_1 = ROUNDFUNC_IN_0_1);
ASSERT(ROUNDFUNC_OUT_0_1 = COPY_IN_0_1);
ASSERT(COPY_OUT1_0_1 = y_0_1);
ASSERT(x_1_1 = XOR_IN1_0_1);
ASSERT(COPY_OUT2_0_1 = XOR_IN2_0_1);
ASSERT(y_1_1 = XOR_OUT_0_1);
ASSERT(x_2_1 = y_2_1);
ASSERT(x_3_1 = y_3_1);
ASSERT(x_0_2 = y_1_1);
ASSERT(x_1_2 = y_2_1);
ASSERT(x_2_2 = y_3_1);
ASSERT(x_3_2 = y_0_1);
ASSERT(x_0_2 = ROUNDFUNC_IN_0_2);
ASSERT(ROUNDFUNC_OUT_0_2 = COPY_IN_0_2);
ASSERT(COPY_OUT1_0_2 = y_0_2);
ASSERT(x_1_2 = XOR_IN1_0_2);
ASSERT(COPY_OUT2_0_2 = XOR_IN2_0_2);
ASSERT(y_1_2 = XOR_OUT_0_2);
ASSERT(x_2_2 = y_2_2);
ASSERT(x_3_2 = y_3_2);
ASSERT(x_0_3 = y_1_2);
ASSERT(x_1_3 = y_2_2);
ASSERT(x_2_3 = y_3_2);
ASSERT(x_3_3 = y_0_2);
ASSERT(x_0_3 = ROUNDFUNC_IN_0_3);
ASSERT(ROUNDFUNC_OUT_0_3 = COPY_IN_0_3);
ASSERT(COPY_OUT1_0_3 = y_0_3);
ASSERT(x_1_3 = XOR_IN1_0_3);
ASSERT(COPY_OUT2_0_3 = XOR_IN2_0_3);
ASSERT(y_1_3 = XOR_OUT_0_3);
ASSERT(x_2_3 = y_2_3);
ASSERT(x_3_3 = y_3_3);
ASSERT(x_0_4 = y_1_3);
ASSERT(x_1_4 = y_2_3);
ASSERT(x_2_4 = y_3_3);
ASSERT(x_3_4 = y_0_3);
ASSERT(x_0_4 = COPY_IN_0_4);
ASSERT(COPY_OUT1_0_4 = ROUNDFUNC_IN_0_4);
ASSERT(ROUNDFUNC_OUT_0_4 = y_0_4);
ASSERT(x_3_4 = XOR_IN1_0_4);
ASSERT(COPY_OUT2_0_4= XOR_IN2_0_4);
ASSERT(y_3_4 = XOR_OUT_0_4);
ASSERT(x_1_4 = y_1_4);
ASSERT(x_2_4 = y_2_4);
ASSERT(x_0_5 = y_1_4);
ASSERT(x_1_5 = y_2_4);
ASSERT(x_2_5 = y_3_4);
ASSERT(x_3_5 = y_0_4);
ASSERT(x_0_5 = COPY_IN_0_5);
ASSERT(COPY_OUT1_0_5 = ROUNDFUNC_IN_0_5);
ASSERT(ROUNDFUNC_OUT_0_5 = y_0_5);
ASSERT(x_3_5 = XOR_IN1_0_5);
ASSERT(COPY_OUT2_0_5= XOR_IN2_0_5);
ASSERT(y_3_5 = XOR_OUT_0_5);
ASSERT(x_1_5 = y_1_5);
ASSERT(x_2_5 = y_2_5);
ASSERT(x_0_6 = y_1_5);
ASSERT(x_1_6 = y_2_5);
ASSERT(x_2_6 = y_3_5);
ASSERT(x_3_6 = y_0_5);
ASSERT(x_0_6 = COPY_IN_0_6);
ASSERT(COPY_OUT1_0_6 = ROUNDFUNC_IN_0_6);
ASSERT(ROUNDFUNC_OUT_0_6 = y_0_6);
ASSERT(x_3_6 = XOR_IN1_0_6);
ASSERT(COPY_OUT2_0_6= XOR_IN2_0_6);
ASSERT(y_3_6 = XOR_OUT_0_6);
ASSERT(x_1_6 = y_1_6);
ASSERT(x_2_6 = y_2_6);
ASSERT(x_0_7 = y_1_6);
ASSERT(x_1_7 = y_2_6);
ASSERT(x_2_7 = y_3_6);
ASSERT(x_3_7 = y_0_6);
ASSERT(x_0_7 = COPY_IN_0_7);
ASSERT(COPY_OUT1_0_7 = ROUNDFUNC_IN_0_7);
ASSERT(ROUNDFUNC_OUT_0_7 = y_0_7);
ASSERT(x_3_7 = XOR_IN1_0_7);
ASSERT(COPY_OUT2_0_7= XOR_IN2_0_7);
ASSERT(y_3_7 = XOR_OUT_0_7);
ASSERT(x_1_7 = y_1_7);
ASSERT(x_2_7 = y_2_7);
ASSERT(x_0_8 = y_1_7);
ASSERT(x_1_8 = y_2_7);
ASSERT(x_2_8 = y_3_7);
ASSERT(x_3_8 = y_0_7);
ASSERT(x_0_8 = COPY_IN_0_8);
ASSERT(COPY_OUT1_0_8 = ROUNDFUNC_IN_0_8);
ASSERT(ROUNDFUNC_OUT_0_8 = y_0_8);
ASSERT(x_3_8 = XOR_IN1_0_8);
ASSERT(COPY_OUT2_0_8= XOR_IN2_0_8);
ASSERT(y_3_8 = XOR_OUT_0_8);
ASSERT(x_1_8 = y_1_8);
ASSERT(x_2_8 = y_2_8);
ASSERT(x_0_9 = y_1_8);
ASSERT(x_1_9 = y_2_8);
ASSERT(x_2_9 = y_3_8);
ASSERT(x_3_9 = y_0_8);
ASSERT(x_0_9 = COPY_IN_0_9);
ASSERT(COPY_OUT1_0_9 = ROUNDFUNC_IN_0_9);
ASSERT(ROUNDFUNC_OUT_0_9 = y_0_9);
ASSERT(x_3_9 = XOR_IN1_0_9);
ASSERT(COPY_OUT2_0_9= XOR_IN2_0_9);
ASSERT(y_3_9 = XOR_OUT_0_9);
ASSERT(x_1_9 = y_1_9);
ASSERT(x_2_9 = y_2_9);
ASSERT(x_0_10 = y_1_9);
ASSERT(x_1_10 = y_2_9);
ASSERT(x_2_10 = y_3_9);
ASSERT(x_3_10 = y_0_9);
ASSERT(x_0_10 = COPY_IN_0_10);
ASSERT(COPY_OUT1_0_10 = ROUNDFUNC_IN_0_10);
ASSERT(ROUNDFUNC_OUT_0_10 = y_0_10);
ASSERT(x_3_10 = XOR_IN1_0_10);
ASSERT(COPY_OUT2_0_10= XOR_IN2_0_10);
ASSERT(y_3_10 = XOR_OUT_0_10);
ASSERT(x_1_10 = y_1_10);
ASSERT(x_2_10 = y_2_10);
ASSERT(x_0_11 = y_1_10);
ASSERT(x_1_11 = y_2_10);
ASSERT(x_2_11 = y_3_10);
ASSERT(x_3_11 = y_0_10);
ASSERT(x_0_11 = COPY_IN_0_11);
ASSERT(COPY_OUT1_0_11 = ROUNDFUNC_IN_0_11);
ASSERT(ROUNDFUNC_OUT_0_11 = y_0_11);
ASSERT(x_3_11 = XOR_IN1_0_11);
ASSERT(COPY_OUT2_0_11= XOR_IN2_0_11);
ASSERT(y_3_11 = XOR_OUT_0_11);
ASSERT(x_1_11 = y_1_11);
ASSERT(x_2_11 = y_2_11);
ASSERT(x_0_12 = y_1_11);
ASSERT(x_1_12 = y_2_11);
ASSERT(x_2_12 = y_3_11);
ASSERT(x_3_12 = y_0_11);
ASSERT(x_0_12 = ROUNDFUNC_IN_0_12);
ASSERT(ROUNDFUNC_OUT_0_12 = COPY_IN_0_12);
ASSERT(COPY_OUT1_0_12 = y_0_12);
ASSERT(x_1_12 = XOR_IN1_0_12);
ASSERT(COPY_OUT2_0_12 = XOR_IN2_0_12);
ASSERT(y_1_12 = XOR_OUT_0_12);
ASSERT(x_2_12 = y_2_12);
ASSERT(x_3_12 = y_3_12);
ASSERT(x_0_13 = y_1_12);
ASSERT(x_1_13 = y_2_12);
ASSERT(x_2_13 = y_3_12);
ASSERT(x_3_13 = y_0_12);
ASSERT(x_0_13 = ROUNDFUNC_IN_0_13);
ASSERT(ROUNDFUNC_OUT_0_13 = COPY_IN_0_13);
ASSERT(COPY_OUT1_0_13 = y_0_13);
ASSERT(x_1_13 = XOR_IN1_0_13);
ASSERT(COPY_OUT2_0_13 = XOR_IN2_0_13);
ASSERT(y_1_13 = XOR_OUT_0_13);
ASSERT(x_2_13 = y_2_13);
ASSERT(x_3_13 = y_3_13);
ASSERT(x_0_14 = y_1_13);
ASSERT(x_1_14 = y_2_13);
ASSERT(x_2_14 = y_3_13);
ASSERT(x_3_14 = y_0_13);
ASSERT(ylinear_0_14 = COPY_IN_0_14);
ASSERT(COPY_OUT1_0_14 = ROUNDFUNC_IN_0_14);
ASSERT(ROUNDFUNC_OUT_0_14 = xlinear_0_14);
ASSERT(ylinear_1_14 = XOR_IN1_0_14);
ASSERT(COPY_OUT2_0_14 = XOR_IN2_0_14);
ASSERT(xlinear_1_14 = XOR_OUT_0_14);
ASSERT(ylinear_2_14 = xlinear_2_14);
ASSERT(ylinear_3_14 = xlinear_3_14);
ASSERT(xlinear_0_15 = ylinear_1_14);
ASSERT(xlinear_1_15 = ylinear_2_14);
ASSERT(xlinear_2_15 = ylinear_3_14);
ASSERT(xlinear_3_15 = ylinear_0_14);
ASSERT(x_0_0 = 0bin000000);
ASSERT(x_1_0 = 0bin000000);
ASSERT(x_2_0 = 0bin000001);
ASSERT(x_3_0 = 0bin000100);
ASSERT(BVLE(BVPLUS(10,0bin000000000@XOR_key_0_0,0bin000000000@XOR_key_0_1,0bin000000000@XOR_key_0_2,0bin000000000@XOR_key_0_3,0bin000000000@XOR_key_0_4,0bin000000000@XOR_key_0_5,0bin000000000@XOR_key_0_6,0bin000000000@XOR_key_0_7,0bin000000000@XOR_key_0_8,0bin000000000@XOR_key_0_9,0bin000000000@XOR_key_0_10,0bin000000000@XOR_key_0_11,0bin000000000@XOR_key_0_12,0bin000000000@XOR_key_0_13), 0bin0000000000 ));
ASSERT(BVLE(BVPLUS(10,0bin000000000@period_0_0,0bin000000000@period_0_1,0bin000000000@period_0_2,0bin000000000@period_0_3,0bin000000000@period_0_4,0bin000000000@period_0_5,0bin000000000@period_0_6,0bin000000000@period_0_7,0bin000000000@period_0_8,0bin000000000@period_0_9,0bin000000000@period_0_10,0bin000000000@period_0_11,0bin000000000@period_0_12,0bin000000000@period_0_13), 0bin0000000001 ));
QUERY(FALSE);
COUNTEREXAMPLE;
